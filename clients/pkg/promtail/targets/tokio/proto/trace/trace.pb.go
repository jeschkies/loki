// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clients/pkg/promtail/targets/tokio/proto/trace/trace.proto

package trace

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	common "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/common"
	google "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/google"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Start watching trace events with the provided filter.
type WatchRequest struct {
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *WatchRequest) Reset()      { *m = WatchRequest{} }
func (*WatchRequest) ProtoMessage() {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ae078170f8e5322, []int{0}
}
func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(m, src)
}
func (m *WatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

func (m *WatchRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// A trace event
type TraceEvent struct {
	// Types that are valid to be assigned to Event:
	//	*TraceEvent_RegisterThread
	//	*TraceEvent_RegisterMetadata
	//	*TraceEvent_NewSpan
	//	*TraceEvent_EnterSpan
	//	*TraceEvent_ExitSpan
	//	*TraceEvent_CloseSpan
	Event isTraceEvent_Event `protobuf_oneof:"event"`
}

func (m *TraceEvent) Reset()      { *m = TraceEvent{} }
func (*TraceEvent) ProtoMessage() {}
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ae078170f8e5322, []int{1}
}
func (m *TraceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceEvent.Merge(m, src)
}
func (m *TraceEvent) XXX_Size() int {
	return m.Size()
}
func (m *TraceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TraceEvent proto.InternalMessageInfo

type isTraceEvent_Event interface {
	isTraceEvent_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TraceEvent_RegisterThread struct {
	RegisterThread *TraceEvent_RegisterThreads `protobuf:"bytes,1,opt,name=register_thread,json=registerThread,proto3,oneof"`
}
type TraceEvent_RegisterMetadata struct {
	RegisterMetadata *common.RegisterMetadata `protobuf:"bytes,2,opt,name=register_metadata,json=registerMetadata,proto3,oneof"`
}
type TraceEvent_NewSpan struct {
	NewSpan *common.Span `protobuf:"bytes,3,opt,name=new_span,json=newSpan,proto3,oneof"`
}
type TraceEvent_EnterSpan struct {
	EnterSpan *TraceEvent_Enter `protobuf:"bytes,4,opt,name=enter_span,json=enterSpan,proto3,oneof"`
}
type TraceEvent_ExitSpan struct {
	ExitSpan *TraceEvent_Exit `protobuf:"bytes,5,opt,name=exit_span,json=exitSpan,proto3,oneof"`
}
type TraceEvent_CloseSpan struct {
	CloseSpan *TraceEvent_Close `protobuf:"bytes,6,opt,name=close_span,json=closeSpan,proto3,oneof"`
}

func (*TraceEvent_RegisterThread) isTraceEvent_Event()   {}
func (*TraceEvent_RegisterMetadata) isTraceEvent_Event() {}
func (*TraceEvent_NewSpan) isTraceEvent_Event()          {}
func (*TraceEvent_EnterSpan) isTraceEvent_Event()        {}
func (*TraceEvent_ExitSpan) isTraceEvent_Event()         {}
func (*TraceEvent_CloseSpan) isTraceEvent_Event()        {}

func (m *TraceEvent) GetEvent() isTraceEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *TraceEvent) GetRegisterThread() *TraceEvent_RegisterThreads {
	if x, ok := m.GetEvent().(*TraceEvent_RegisterThread); ok {
		return x.RegisterThread
	}
	return nil
}

func (m *TraceEvent) GetRegisterMetadata() *common.RegisterMetadata {
	if x, ok := m.GetEvent().(*TraceEvent_RegisterMetadata); ok {
		return x.RegisterMetadata
	}
	return nil
}

func (m *TraceEvent) GetNewSpan() *common.Span {
	if x, ok := m.GetEvent().(*TraceEvent_NewSpan); ok {
		return x.NewSpan
	}
	return nil
}

func (m *TraceEvent) GetEnterSpan() *TraceEvent_Enter {
	if x, ok := m.GetEvent().(*TraceEvent_EnterSpan); ok {
		return x.EnterSpan
	}
	return nil
}

func (m *TraceEvent) GetExitSpan() *TraceEvent_Exit {
	if x, ok := m.GetEvent().(*TraceEvent_ExitSpan); ok {
		return x.ExitSpan
	}
	return nil
}

func (m *TraceEvent) GetCloseSpan() *TraceEvent_Close {
	if x, ok := m.GetEvent().(*TraceEvent_CloseSpan); ok {
		return x.CloseSpan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TraceEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TraceEvent_RegisterThread)(nil),
		(*TraceEvent_RegisterMetadata)(nil),
		(*TraceEvent_NewSpan)(nil),
		(*TraceEvent_EnterSpan)(nil),
		(*TraceEvent_ExitSpan)(nil),
		(*TraceEvent_CloseSpan)(nil),
	}
}

type TraceEvent_RegisterThreads struct {
	Names map[uint64]string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TraceEvent_RegisterThreads) Reset()      { *m = TraceEvent_RegisterThreads{} }
func (*TraceEvent_RegisterThreads) ProtoMessage() {}
func (*TraceEvent_RegisterThreads) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ae078170f8e5322, []int{1, 0}
}
func (m *TraceEvent_RegisterThreads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceEvent_RegisterThreads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceEvent_RegisterThreads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceEvent_RegisterThreads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceEvent_RegisterThreads.Merge(m, src)
}
func (m *TraceEvent_RegisterThreads) XXX_Size() int {
	return m.Size()
}
func (m *TraceEvent_RegisterThreads) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceEvent_RegisterThreads.DiscardUnknown(m)
}

var xxx_messageInfo_TraceEvent_RegisterThreads proto.InternalMessageInfo

func (m *TraceEvent_RegisterThreads) GetNames() map[uint64]string {
	if m != nil {
		return m.Names
	}
	return nil
}

type TraceEvent_Enter struct {
	SpanId   *common.SpanId    `protobuf:"bytes,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ThreadId uint64            `protobuf:"varint,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	At       *google.Timestamp `protobuf:"bytes,3,opt,name=at,proto3" json:"at,omitempty"`
}

func (m *TraceEvent_Enter) Reset()      { *m = TraceEvent_Enter{} }
func (*TraceEvent_Enter) ProtoMessage() {}
func (*TraceEvent_Enter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ae078170f8e5322, []int{1, 1}
}
func (m *TraceEvent_Enter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceEvent_Enter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceEvent_Enter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceEvent_Enter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceEvent_Enter.Merge(m, src)
}
func (m *TraceEvent_Enter) XXX_Size() int {
	return m.Size()
}
func (m *TraceEvent_Enter) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceEvent_Enter.DiscardUnknown(m)
}

var xxx_messageInfo_TraceEvent_Enter proto.InternalMessageInfo

func (m *TraceEvent_Enter) GetSpanId() *common.SpanId {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *TraceEvent_Enter) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *TraceEvent_Enter) GetAt() *google.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

type TraceEvent_Exit struct {
	SpanId   *common.SpanId    `protobuf:"bytes,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ThreadId uint64            `protobuf:"varint,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	At       *google.Timestamp `protobuf:"bytes,3,opt,name=at,proto3" json:"at,omitempty"`
}

func (m *TraceEvent_Exit) Reset()      { *m = TraceEvent_Exit{} }
func (*TraceEvent_Exit) ProtoMessage() {}
func (*TraceEvent_Exit) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ae078170f8e5322, []int{1, 2}
}
func (m *TraceEvent_Exit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceEvent_Exit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceEvent_Exit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceEvent_Exit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceEvent_Exit.Merge(m, src)
}
func (m *TraceEvent_Exit) XXX_Size() int {
	return m.Size()
}
func (m *TraceEvent_Exit) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceEvent_Exit.DiscardUnknown(m)
}

var xxx_messageInfo_TraceEvent_Exit proto.InternalMessageInfo

func (m *TraceEvent_Exit) GetSpanId() *common.SpanId {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *TraceEvent_Exit) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *TraceEvent_Exit) GetAt() *google.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

type TraceEvent_Close struct {
	SpanId *common.SpanId    `protobuf:"bytes,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	At     *google.Timestamp `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
}

func (m *TraceEvent_Close) Reset()      { *m = TraceEvent_Close{} }
func (*TraceEvent_Close) ProtoMessage() {}
func (*TraceEvent_Close) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ae078170f8e5322, []int{1, 3}
}
func (m *TraceEvent_Close) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceEvent_Close) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceEvent_Close.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceEvent_Close) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceEvent_Close.Merge(m, src)
}
func (m *TraceEvent_Close) XXX_Size() int {
	return m.Size()
}
func (m *TraceEvent_Close) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceEvent_Close.DiscardUnknown(m)
}

var xxx_messageInfo_TraceEvent_Close proto.InternalMessageInfo

func (m *TraceEvent_Close) GetSpanId() *common.SpanId {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *TraceEvent_Close) GetAt() *google.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

func init() {
	proto.RegisterType((*WatchRequest)(nil), "trace.WatchRequest")
	proto.RegisterType((*TraceEvent)(nil), "trace.TraceEvent")
	proto.RegisterType((*TraceEvent_RegisterThreads)(nil), "trace.TraceEvent.RegisterThreads")
	proto.RegisterMapType((map[uint64]string)(nil), "trace.TraceEvent.RegisterThreads.NamesEntry")
	proto.RegisterType((*TraceEvent_Enter)(nil), "trace.TraceEvent.Enter")
	proto.RegisterType((*TraceEvent_Exit)(nil), "trace.TraceEvent.Exit")
	proto.RegisterType((*TraceEvent_Close)(nil), "trace.TraceEvent.Close")
}

func init() {
	proto.RegisterFile("clients/pkg/promtail/targets/tokio/proto/trace/trace.proto", fileDescriptor_4ae078170f8e5322)
}

var fileDescriptor_4ae078170f8e5322 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0xb5, 0xa7, 0x9d, 0xb4, 0xb9, 0xad, 0xfa, 0x70, 0x51, 0x89, 0x06, 0xc9, 0x6a, 0xbb, 0x80,
	0x22, 0xa1, 0x19, 0xd4, 0x0a, 0x29, 0xaa, 0x58, 0x05, 0x05, 0x52, 0x09, 0x58, 0xb8, 0x91, 0x90,
	0xd8, 0x44, 0x6e, 0xe2, 0x4e, 0x46, 0x99, 0x17, 0x33, 0x4e, 0x1f, 0x12, 0x0b, 0xfe, 0x00, 0x3e,
	0x83, 0x4f, 0x61, 0xc1, 0x22, 0xcb, 0x2e, 0xc9, 0x64, 0xc3, 0xb2, 0x9f, 0x80, 0x6c, 0x4f, 0x68,
	0x69, 0x79, 0x6e, 0xd8, 0xc4, 0xbe, 0xd7, 0xe7, 0xdc, 0x73, 0x73, 0x8f, 0x3d, 0xb0, 0xd7, 0x0d,
	0x03, 0x11, 0xcb, 0xdc, 0x4b, 0x07, 0xbe, 0x97, 0x66, 0x49, 0x24, 0x79, 0x10, 0x7a, 0x92, 0x67,
	0xbe, 0x90, 0xb9, 0x27, 0x93, 0x41, 0x90, 0xa8, 0xb4, 0x4c, 0x3c, 0x99, 0xf1, 0xae, 0x30, 0xbf,
	0xae, 0xce, 0x10, 0x5b, 0x07, 0xce, 0xba, 0x9f, 0x24, 0x7e, 0x28, 0x3c, 0x19, 0x44, 0x22, 0x97,
	0x3c, 0x4a, 0xcd, 0xb1, 0xb3, 0xd6, 0x4d, 0xa2, 0x28, 0x89, 0x3d, 0xb3, 0x98, 0xe4, 0xd6, 0x5d,
	0x58, 0x7c, 0xc5, 0x65, 0xb7, 0xcf, 0xc4, 0x9b, 0xa1, 0xc8, 0x25, 0x59, 0x87, 0xca, 0x51, 0x10,
	0x4a, 0x91, 0xd5, 0xf0, 0x06, 0xde, 0xae, 0xb2, 0x32, 0xda, 0xfa, 0x5c, 0x01, 0x68, 0xab, 0xf2,
	0xcd, 0x63, 0x11, 0x4b, 0xf2, 0x1c, 0x96, 0x33, 0xe1, 0x07, 0xb9, 0x14, 0x59, 0x47, 0xf6, 0x33,
	0xc1, 0x7b, 0x1a, 0xbf, 0xb0, 0xb3, 0xe9, 0x9a, 0x8e, 0x2e, 0xb1, 0x2e, 0x2b, 0x81, 0x6d, 0x8d,
	0xcb, 0x5b, 0x88, 0x2d, 0x65, 0x3f, 0xa4, 0xc8, 0x33, 0x58, 0xfd, 0x5e, 0x2d, 0x12, 0x92, 0xf7,
	0xb8, 0xe4, 0x35, 0x4b, 0xd7, 0xab, 0xb9, 0x65, 0xbb, 0xd3, 0x2a, 0x2f, 0xca, 0xf3, 0x16, 0x62,
	0x2b, 0xd9, 0xb5, 0x1c, 0xb9, 0x0f, 0xf3, 0xb1, 0x38, 0xe9, 0xe4, 0x29, 0x8f, 0x6b, 0x33, 0x9a,
	0xbf, 0x38, 0xe5, 0x1f, 0xa4, 0x3c, 0x6e, 0x21, 0x36, 0x17, 0x8b, 0x13, 0xb5, 0x25, 0x75, 0x00,
	0x11, 0x2b, 0x41, 0x0d, 0x9e, 0xd5, 0xe0, 0xdb, 0x37, 0x9b, 0x6f, 0x2a, 0x4c, 0x0b, 0xb1, 0xaa,
	0x06, 0x6b, 0xe6, 0x23, 0xa8, 0x8a, 0xd3, 0x40, 0x1a, 0xa2, 0xad, 0x89, 0xeb, 0x3f, 0x21, 0x9e,
	0x06, 0xb2, 0x85, 0xd8, 0xbc, 0x82, 0x4e, 0x05, 0xbb, 0x61, 0x92, 0x0b, 0xc3, 0xab, 0xfc, 0x4a,
	0xf0, 0x89, 0xc2, 0x28, 0x41, 0x0d, 0x56, 0x4c, 0xe7, 0x3d, 0x86, 0xe5, 0x6b, 0x43, 0x24, 0x0d,
	0xb0, 0x63, 0x1e, 0x89, 0xbc, 0x86, 0x37, 0x66, 0xb6, 0x17, 0x76, 0x1e, 0xfc, 0x71, 0xec, 0xee,
	0x4b, 0x05, 0x6f, 0xc6, 0x32, 0x3b, 0x63, 0x86, 0xea, 0xd4, 0x01, 0x2e, 0x93, 0x64, 0x05, 0x66,
	0x06, 0xe2, 0x4c, 0xdb, 0x38, 0xcb, 0xd4, 0x96, 0xdc, 0x02, 0xfb, 0x98, 0x87, 0x43, 0xa1, 0xad,
	0xa8, 0x32, 0x13, 0xec, 0x59, 0x75, 0xec, 0xa4, 0x60, 0xeb, 0xc1, 0x90, 0x7b, 0x30, 0xa7, 0xfe,
	0x4e, 0x27, 0x98, 0xfa, 0xbf, 0x74, 0x75, 0xde, 0xfb, 0x3d, 0x56, 0xc9, 0xf5, 0x4a, 0xee, 0x40,
	0xd5, 0xdc, 0x13, 0x05, 0xb5, 0xb4, 0xc6, 0xbc, 0x49, 0xec, 0xf7, 0xc8, 0x26, 0x58, 0x5c, 0x96,
	0x86, 0xad, 0xba, 0xe6, 0xfa, 0xba, 0xed, 0xe9, 0xf5, 0x65, 0x16, 0x97, 0x4e, 0x02, 0xb3, 0x6a,
	0xa2, 0xff, 0x4f, 0xf0, 0x00, 0x6c, 0x6d, 0xc5, 0xdf, 0x2b, 0x9a, 0xa2, 0xd6, 0x6f, 0x8a, 0x36,
	0xe6, 0xc0, 0x16, 0xca, 0x9c, 0x9d, 0xc7, 0x60, 0x6b, 0xab, 0xc8, 0x2e, 0xd8, 0xfa, 0xfd, 0x91,
	0xb5, 0xd2, 0xc1, 0xab, 0xaf, 0xd1, 0x59, 0xbd, 0x61, 0xeb, 0x16, 0x7a, 0x88, 0x1b, 0x6f, 0x47,
	0x63, 0x8a, 0xce, 0xc7, 0x14, 0x5d, 0x8c, 0x29, 0x7e, 0x57, 0x50, 0xfc, 0xb1, 0xa0, 0xf8, 0x53,
	0x41, 0xf1, 0xa8, 0xa0, 0xf8, 0x4b, 0x41, 0xf1, 0xd7, 0x82, 0xa2, 0x8b, 0x82, 0xe2, 0x0f, 0x13,
	0x8a, 0x46, 0x13, 0x8a, 0xce, 0x27, 0x14, 0xbd, 0x7e, 0xea, 0x07, 0xb2, 0x3f, 0x3c, 0x54, 0xdd,
	0x7b, 0x7e, 0xc6, 0x8f, 0x78, 0xcc, 0xbd, 0x30, 0x19, 0x04, 0xde, 0xbf, 0x7d, 0x72, 0x0e, 0x2b,
	0x3a, 0xd8, 0xfd, 0x16, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xf2, 0x46, 0x4c, 0xab, 0x04, 0x00, 0x00,
}

func (this *WatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchRequest)
	if !ok {
		that2, ok := that.(WatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	return true
}
func (this *TraceEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent)
	if !ok {
		that2, ok := that.(TraceEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *TraceEvent_RegisterThread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_RegisterThread)
	if !ok {
		that2, ok := that.(TraceEvent_RegisterThread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterThread.Equal(that1.RegisterThread) {
		return false
	}
	return true
}
func (this *TraceEvent_RegisterMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_RegisterMetadata)
	if !ok {
		that2, ok := that.(TraceEvent_RegisterMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterMetadata.Equal(that1.RegisterMetadata) {
		return false
	}
	return true
}
func (this *TraceEvent_NewSpan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_NewSpan)
	if !ok {
		that2, ok := that.(TraceEvent_NewSpan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewSpan.Equal(that1.NewSpan) {
		return false
	}
	return true
}
func (this *TraceEvent_EnterSpan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_EnterSpan)
	if !ok {
		that2, ok := that.(TraceEvent_EnterSpan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnterSpan.Equal(that1.EnterSpan) {
		return false
	}
	return true
}
func (this *TraceEvent_ExitSpan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_ExitSpan)
	if !ok {
		that2, ok := that.(TraceEvent_ExitSpan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExitSpan.Equal(that1.ExitSpan) {
		return false
	}
	return true
}
func (this *TraceEvent_CloseSpan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_CloseSpan)
	if !ok {
		that2, ok := that.(TraceEvent_CloseSpan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloseSpan.Equal(that1.CloseSpan) {
		return false
	}
	return true
}
func (this *TraceEvent_RegisterThreads) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_RegisterThreads)
	if !ok {
		that2, ok := that.(TraceEvent_RegisterThreads)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	return true
}
func (this *TraceEvent_Enter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_Enter)
	if !ok {
		that2, ok := that.(TraceEvent_Enter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpanId.Equal(that1.SpanId) {
		return false
	}
	if this.ThreadId != that1.ThreadId {
		return false
	}
	if !this.At.Equal(that1.At) {
		return false
	}
	return true
}
func (this *TraceEvent_Exit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_Exit)
	if !ok {
		that2, ok := that.(TraceEvent_Exit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpanId.Equal(that1.SpanId) {
		return false
	}
	if this.ThreadId != that1.ThreadId {
		return false
	}
	if !this.At.Equal(that1.At) {
		return false
	}
	return true
}
func (this *TraceEvent_Close) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraceEvent_Close)
	if !ok {
		that2, ok := that.(TraceEvent_Close)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpanId.Equal(that1.SpanId) {
		return false
	}
	if !this.At.Equal(that1.At) {
		return false
	}
	return true
}
func (this *WatchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&trace.WatchRequest{")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&trace.TraceEvent{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceEvent_RegisterThread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&trace.TraceEvent_RegisterThread{` +
		`RegisterThread:` + fmt.Sprintf("%#v", this.RegisterThread) + `}`}, ", ")
	return s
}
func (this *TraceEvent_RegisterMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&trace.TraceEvent_RegisterMetadata{` +
		`RegisterMetadata:` + fmt.Sprintf("%#v", this.RegisterMetadata) + `}`}, ", ")
	return s
}
func (this *TraceEvent_NewSpan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&trace.TraceEvent_NewSpan{` +
		`NewSpan:` + fmt.Sprintf("%#v", this.NewSpan) + `}`}, ", ")
	return s
}
func (this *TraceEvent_EnterSpan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&trace.TraceEvent_EnterSpan{` +
		`EnterSpan:` + fmt.Sprintf("%#v", this.EnterSpan) + `}`}, ", ")
	return s
}
func (this *TraceEvent_ExitSpan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&trace.TraceEvent_ExitSpan{` +
		`ExitSpan:` + fmt.Sprintf("%#v", this.ExitSpan) + `}`}, ", ")
	return s
}
func (this *TraceEvent_CloseSpan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&trace.TraceEvent_CloseSpan{` +
		`CloseSpan:` + fmt.Sprintf("%#v", this.CloseSpan) + `}`}, ", ")
	return s
}
func (this *TraceEvent_RegisterThreads) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&trace.TraceEvent_RegisterThreads{")
	keysForNames := make([]uint64, 0, len(this.Names))
	for k, _ := range this.Names {
		keysForNames = append(keysForNames, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForNames)
	mapStringForNames := "map[uint64]string{"
	for _, k := range keysForNames {
		mapStringForNames += fmt.Sprintf("%#v: %#v,", k, this.Names[k])
	}
	mapStringForNames += "}"
	if this.Names != nil {
		s = append(s, "Names: "+mapStringForNames+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceEvent_Enter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&trace.TraceEvent_Enter{")
	if this.SpanId != nil {
		s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	}
	s = append(s, "ThreadId: "+fmt.Sprintf("%#v", this.ThreadId)+",\n")
	if this.At != nil {
		s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceEvent_Exit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&trace.TraceEvent_Exit{")
	if this.SpanId != nil {
		s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	}
	s = append(s, "ThreadId: "+fmt.Sprintf("%#v", this.ThreadId)+",\n")
	if this.At != nil {
		s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceEvent_Close) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&trace.TraceEvent_Close{")
	if this.SpanId != nil {
		s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	}
	if this.At != nil {
		s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTrace(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraceClient is the client API for Trace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraceClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Trace_WatchClient, error)
}

type traceClient struct {
	cc *grpc.ClientConn
}

func NewTraceClient(cc *grpc.ClientConn) TraceClient {
	return &traceClient{cc}
}

func (c *traceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Trace_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Trace_serviceDesc.Streams[0], "/trace.Trace/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Trace_WatchClient interface {
	Recv() (*TraceEvent, error)
	grpc.ClientStream
}

type traceWatchClient struct {
	grpc.ClientStream
}

func (x *traceWatchClient) Recv() (*TraceEvent, error) {
	m := new(TraceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraceServer is the server API for Trace service.
type TraceServer interface {
	Watch(*WatchRequest, Trace_WatchServer) error
}

// UnimplementedTraceServer can be embedded to have forward compatible implementations.
type UnimplementedTraceServer struct {
}

func (*UnimplementedTraceServer) Watch(req *WatchRequest, srv Trace_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterTraceServer(s *grpc.Server, srv TraceServer) {
	s.RegisterService(&_Trace_serviceDesc, srv)
}

func _Trace_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraceServer).Watch(m, &traceWatchServer{stream})
}

type Trace_WatchServer interface {
	Send(*TraceEvent) error
	grpc.ServerStream
}

type traceWatchServer struct {
	grpc.ServerStream
}

func (x *traceWatchServer) Send(m *TraceEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Trace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trace.Trace",
	HandlerType: (*TraceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Trace_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clients/pkg/promtail/targets/tokio/proto/trace/trace.proto",
}

func (m *WatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintTrace(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TraceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TraceEvent_RegisterThread) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TraceEvent_RegisterThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterThread != nil {
		{
			size, err := m.RegisterThread.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TraceEvent_RegisterMetadata) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TraceEvent_RegisterMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterMetadata != nil {
		{
			size, err := m.RegisterMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TraceEvent_NewSpan) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TraceEvent_NewSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewSpan != nil {
		{
			size, err := m.NewSpan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TraceEvent_EnterSpan) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TraceEvent_EnterSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnterSpan != nil {
		{
			size, err := m.EnterSpan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TraceEvent_ExitSpan) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TraceEvent_ExitSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExitSpan != nil {
		{
			size, err := m.ExitSpan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TraceEvent_CloseSpan) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TraceEvent_CloseSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseSpan != nil {
		{
			size, err := m.CloseSpan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TraceEvent_RegisterThreads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceEvent_RegisterThreads) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceEvent_RegisterThreads) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for k := range m.Names {
			v := m.Names[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTrace(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTrace(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTrace(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TraceEvent_Enter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceEvent_Enter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceEvent_Enter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.At != nil {
		{
			size, err := m.At.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ThreadId != 0 {
		i = encodeVarintTrace(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x10
	}
	if m.SpanId != nil {
		{
			size, err := m.SpanId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TraceEvent_Exit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceEvent_Exit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceEvent_Exit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.At != nil {
		{
			size, err := m.At.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ThreadId != 0 {
		i = encodeVarintTrace(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x10
	}
	if m.SpanId != nil {
		{
			size, err := m.SpanId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TraceEvent_Close) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceEvent_Close) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TraceEvent_Close) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.At != nil {
		{
			size, err := m.At.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SpanId != nil {
		{
			size, err := m.SpanId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrace(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func (m *TraceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *TraceEvent_RegisterThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterThread != nil {
		l = m.RegisterThread.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *TraceEvent_RegisterMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterMetadata != nil {
		l = m.RegisterMetadata.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *TraceEvent_NewSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewSpan != nil {
		l = m.NewSpan.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *TraceEvent_EnterSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnterSpan != nil {
		l = m.EnterSpan.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *TraceEvent_ExitSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExitSpan != nil {
		l = m.ExitSpan.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *TraceEvent_CloseSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseSpan != nil {
		l = m.CloseSpan.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *TraceEvent_RegisterThreads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for k, v := range m.Names {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTrace(uint64(k)) + 1 + len(v) + sovTrace(uint64(len(v)))
			n += mapEntrySize + 1 + sovTrace(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TraceEvent_Enter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanId != nil {
		l = m.SpanId.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.ThreadId != 0 {
		n += 1 + sovTrace(uint64(m.ThreadId))
	}
	if m.At != nil {
		l = m.At.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func (m *TraceEvent_Exit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanId != nil {
		l = m.SpanId.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.ThreadId != 0 {
		n += 1 + sovTrace(uint64(m.ThreadId))
	}
	if m.At != nil {
		l = m.At.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func (m *TraceEvent_Close) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanId != nil {
		l = m.SpanId.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.At != nil {
		l = m.At.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func sovTrace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrace(x uint64) (n int) {
	return sovTrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WatchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchRequest{`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_RegisterThread) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_RegisterThread{`,
		`RegisterThread:` + strings.Replace(fmt.Sprintf("%v", this.RegisterThread), "TraceEvent_RegisterThreads", "TraceEvent_RegisterThreads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_RegisterMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_RegisterMetadata{`,
		`RegisterMetadata:` + strings.Replace(fmt.Sprintf("%v", this.RegisterMetadata), "RegisterMetadata", "common.RegisterMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_NewSpan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_NewSpan{`,
		`NewSpan:` + strings.Replace(fmt.Sprintf("%v", this.NewSpan), "Span", "common.Span", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_EnterSpan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_EnterSpan{`,
		`EnterSpan:` + strings.Replace(fmt.Sprintf("%v", this.EnterSpan), "TraceEvent_Enter", "TraceEvent_Enter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_ExitSpan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_ExitSpan{`,
		`ExitSpan:` + strings.Replace(fmt.Sprintf("%v", this.ExitSpan), "TraceEvent_Exit", "TraceEvent_Exit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_CloseSpan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_CloseSpan{`,
		`CloseSpan:` + strings.Replace(fmt.Sprintf("%v", this.CloseSpan), "TraceEvent_Close", "TraceEvent_Close", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_RegisterThreads) String() string {
	if this == nil {
		return "nil"
	}
	keysForNames := make([]uint64, 0, len(this.Names))
	for k, _ := range this.Names {
		keysForNames = append(keysForNames, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForNames)
	mapStringForNames := "map[uint64]string{"
	for _, k := range keysForNames {
		mapStringForNames += fmt.Sprintf("%v: %v,", k, this.Names[k])
	}
	mapStringForNames += "}"
	s := strings.Join([]string{`&TraceEvent_RegisterThreads{`,
		`Names:` + mapStringForNames + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_Enter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_Enter{`,
		`SpanId:` + strings.Replace(fmt.Sprintf("%v", this.SpanId), "SpanId", "common.SpanId", 1) + `,`,
		`ThreadId:` + fmt.Sprintf("%v", this.ThreadId) + `,`,
		`At:` + strings.Replace(fmt.Sprintf("%v", this.At), "Timestamp", "google.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_Exit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_Exit{`,
		`SpanId:` + strings.Replace(fmt.Sprintf("%v", this.SpanId), "SpanId", "common.SpanId", 1) + `,`,
		`ThreadId:` + fmt.Sprintf("%v", this.ThreadId) + `,`,
		`At:` + strings.Replace(fmt.Sprintf("%v", this.At), "Timestamp", "google.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent_Close) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent_Close{`,
		`SpanId:` + strings.Replace(fmt.Sprintf("%v", this.SpanId), "SpanId", "common.SpanId", 1) + `,`,
		`At:` + strings.Replace(fmt.Sprintf("%v", this.At), "Timestamp", "google.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTrace(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterThread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TraceEvent_RegisterThreads{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &TraceEvent_RegisterThread{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.RegisterMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &TraceEvent_RegisterMetadata{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.Span{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &TraceEvent_NewSpan{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TraceEvent_Enter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &TraceEvent_EnterSpan{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TraceEvent_Exit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &TraceEvent_ExitSpan{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TraceEvent_Close{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &TraceEvent_CloseSpan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceEvent_RegisterThreads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterThreads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterThreads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Names == nil {
				m.Names = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTrace
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTrace
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Names[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceEvent_Enter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanId == nil {
				m.SpanId = &common.SpanId{}
			}
			if err := m.SpanId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.At == nil {
				m.At = &google.Timestamp{}
			}
			if err := m.At.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceEvent_Exit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanId == nil {
				m.SpanId = &common.SpanId{}
			}
			if err := m.SpanId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.At == nil {
				m.At = &google.Timestamp{}
			}
			if err := m.At.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceEvent_Close) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Close: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Close: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanId == nil {
				m.SpanId = &common.SpanId{}
			}
			if err := m.SpanId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.At == nil {
				m.At = &google.Timestamp{}
			}
			if err := m.At.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrace
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTrace
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrace   = fmt.Errorf("proto: integer overflow")
)
