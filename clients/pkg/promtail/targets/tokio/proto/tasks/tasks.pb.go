// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clients/pkg/promtail/targets/tokio/proto/tasks/tasks.proto

package tasks

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	common "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/common"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Task_Kind int32

const (
	SPAWN    Task_Kind = 0
	BLOCKING Task_Kind = 1
)

var Task_Kind_name = map[int32]string{
	0: "SPAWN",
	1: "BLOCKING",
}

var Task_Kind_value = map[string]int32{
	"SPAWN":    0,
	"BLOCKING": 1,
}

func (Task_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0699f8eed34b53e1, []int{2, 0}
}

// A task state update.
//
// Each `TaskUpdate` contains any task data that has changed since the last
// update. This includes:
// - any new tasks that were spawned since the last update
// - the current stats for any task whose stats changed since the last update
type TaskUpdate struct {
	// A list of new tasks that were spawned since the last `TaskUpdate` was
	// sent.
	//
	// If this is empty, no new tasks were spawned.
	NewTasks []*Task `protobuf:"bytes,1,rep,name=new_tasks,json=newTasks,proto3" json:"new_tasks,omitempty"`
	// Any task stats that have changed since the last update.
	//
	// This is a map of task IDs (64-bit unsigned integers) to task stats. If a
	// task's ID is not included in this map, then its stats have *not* changed
	// since the last `TaskUpdate` in which they were present. If a task's ID
	// *is* included in this map, the corresponding value represents a complete
	// snapshot of that task's stats at in the current time window.
	StatsUpdate map[uint64]*Stats `protobuf:"bytes,3,rep,name=stats_update,json=statsUpdate,proto3" json:"stats_update,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TaskUpdate) Reset()      { *m = TaskUpdate{} }
func (*TaskUpdate) ProtoMessage() {}
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0699f8eed34b53e1, []int{0}
}
func (m *TaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdate.Merge(m, src)
}
func (m *TaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *TaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdate proto.InternalMessageInfo

func (m *TaskUpdate) GetNewTasks() []*Task {
	if m != nil {
		return m.NewTasks
	}
	return nil
}

func (m *TaskUpdate) GetStatsUpdate() map[uint64]*Stats {
	if m != nil {
		return m.StatsUpdate
	}
	return nil
}

// A task details update
type TaskDetails struct {
	// The task's ID which the details belong to.
	TaskId *common.Id           `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Now    *timestamp.Timestamp `protobuf:"bytes,2,opt,name=now,proto3" json:"now,omitempty"`
	// HdrHistogram.rs `Histogram` serialized to binary in the V2 format
	PollTimesHistogram []byte `protobuf:"bytes,3,opt,name=poll_times_histogram,json=pollTimesHistogram,proto3" json:"poll_times_histogram,omitempty"`
}

func (m *TaskDetails) Reset()      { *m = TaskDetails{} }
func (*TaskDetails) ProtoMessage() {}
func (*TaskDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_0699f8eed34b53e1, []int{1}
}
func (m *TaskDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDetails.Merge(m, src)
}
func (m *TaskDetails) XXX_Size() int {
	return m.Size()
}
func (m *TaskDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDetails.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDetails proto.InternalMessageInfo

func (m *TaskDetails) GetTaskId() *common.Id {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskDetails) GetNow() *timestamp.Timestamp {
	if m != nil {
		return m.Now
	}
	return nil
}

func (m *TaskDetails) GetPollTimesHistogram() []byte {
	if m != nil {
		return m.PollTimesHistogram
	}
	return nil
}

// Data recorded when a new task is spawned.
type Task struct {
	// The task's ID.
	//
	// This uniquely identifies this task across all *currently live* tasks.
	// When the task's stats change, or when the task completes, it will be
	// identified by this ID; if the client requires additional information
	// included in the `Task` message, it should store that data and access it
	// by ID.
	Id *common.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The numeric ID of the task's `Metadata`.
	//
	// This identifies the `Metadata` that describes the `tracing` span
	// corresponding to this task. The metadata for this ID will have been sent
	// in a prior `RegisterMetadata` message.
	Metadata *common.MetaId `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The category of task this task belongs to.
	Kind Task_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=tasks.Task_Kind" json:"kind,omitempty"`
	// A list of `Field` objects attached to this task.
	Fields []*common.Field `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// An ordered list of span IDs corresponding to the `tracing` span context
	// in which this task was spawned.
	//
	// The first span ID in this list is the immediate parent, followed by that
	// span's parent, and so on. The final ID is the root span of the current
	// trace.
	//
	// If this is empty, there were *no* active spans when the task was spawned.
	//
	// These IDs may correspond to `tracing` spans which are *not* tasks, if
	// additional trace data is being collected.
	Parents []*common.SpanId `protobuf:"bytes,5,rep,name=parents,proto3" json:"parents,omitempty"`
	// The location in code where the task was spawned.
	Location *common.Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_0699f8eed34b53e1, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() *common.Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Task) GetMetadata() *common.MetaId {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Task) GetKind() Task_Kind {
	if m != nil {
		return m.Kind
	}
	return SPAWN
}

func (m *Task) GetFields() []*common.Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Task) GetParents() []*common.SpanId {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Task) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// Task performance statistics.
type Stats struct {
	// Timestamp of when the task was spawned.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp of when the task was dropped.
	DroppedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=dropped_at,json=droppedAt,proto3" json:"dropped_at,omitempty"`
	// The total number of times this task's waker has been woken.
	Wakes uint64 `protobuf:"varint,3,opt,name=wakes,proto3" json:"wakes,omitempty"`
	// The total number of times this task's waker has been cloned.
	WakerClones uint64 `protobuf:"varint,4,opt,name=waker_clones,json=wakerClones,proto3" json:"waker_clones,omitempty"`
	// The total number of times this task's waker has been dropped.
	WakerDrops uint64 `protobuf:"varint,5,opt,name=waker_drops,json=wakerDrops,proto3" json:"waker_drops,omitempty"`
	// The timestamp of the most recent time this task has been woken.
	//
	// If this is `None`, the task has not yet been woken.
	LastWake *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_wake,json=lastWake,proto3" json:"last_wake,omitempty"`
	// Contains task poll statistics.
	PollStats *common.PollStats `protobuf:"bytes,7,opt,name=poll_stats,json=pollStats,proto3" json:"poll_stats,omitempty"`
	// The total number of times this task has woken itself.
	SelfWakes uint64 `protobuf:"varint,8,opt,name=self_wakes,json=selfWakes,proto3" json:"self_wakes,omitempty"`
}

func (m *Stats) Reset()      { *m = Stats{} }
func (*Stats) ProtoMessage() {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0699f8eed34b53e1, []int{3}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Stats) GetDroppedAt() *timestamp.Timestamp {
	if m != nil {
		return m.DroppedAt
	}
	return nil
}

func (m *Stats) GetWakes() uint64 {
	if m != nil {
		return m.Wakes
	}
	return 0
}

func (m *Stats) GetWakerClones() uint64 {
	if m != nil {
		return m.WakerClones
	}
	return 0
}

func (m *Stats) GetWakerDrops() uint64 {
	if m != nil {
		return m.WakerDrops
	}
	return 0
}

func (m *Stats) GetLastWake() *timestamp.Timestamp {
	if m != nil {
		return m.LastWake
	}
	return nil
}

func (m *Stats) GetPollStats() *common.PollStats {
	if m != nil {
		return m.PollStats
	}
	return nil
}

func (m *Stats) GetSelfWakes() uint64 {
	if m != nil {
		return m.SelfWakes
	}
	return 0
}

func init() {
	proto.RegisterEnum("tasks.Task_Kind", Task_Kind_name, Task_Kind_value)
	proto.RegisterType((*TaskUpdate)(nil), "tasks.TaskUpdate")
	proto.RegisterMapType((map[uint64]*Stats)(nil), "tasks.TaskUpdate.StatsUpdateEntry")
	proto.RegisterType((*TaskDetails)(nil), "tasks.TaskDetails")
	proto.RegisterType((*Task)(nil), "tasks.Task")
	proto.RegisterType((*Stats)(nil), "tasks.Stats")
}

func init() {
	proto.RegisterFile("clients/pkg/promtail/targets/tokio/proto/tasks/tasks.proto", fileDescriptor_0699f8eed34b53e1)
}

var fileDescriptor_0699f8eed34b53e1 = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xce, 0xe4, 0xaf, 0xc9, 0x49, 0x6e, 0x95, 0x3b, 0xb7, 0x0b, 0x2b, 0xd2, 0x75, 0x73, 0x73,
	0x41, 0x0a, 0xa8, 0xb2, 0xab, 0xb0, 0x00, 0xba, 0xeb, 0x2f, 0x44, 0x2d, 0xa5, 0x72, 0x8b, 0x2a,
	0xb1, 0xb1, 0xa6, 0xf1, 0x24, 0xb5, 0xec, 0x78, 0x2c, 0xcf, 0x84, 0xa8, 0x12, 0x0b, 0x1e, 0x01,
	0x21, 0x1e, 0x82, 0x47, 0x41, 0x62, 0xd3, 0x65, 0x97, 0xc4, 0xdd, 0xb0, 0xec, 0x23, 0xa0, 0x99,
	0xb1, 0xdb, 0xaa, 0x42, 0x45, 0x6c, 0x92, 0x33, 0xdf, 0xf7, 0x9d, 0x9f, 0xf9, 0xe6, 0x24, 0xb0,
	0x36, 0x0c, 0x7d, 0x1a, 0x09, 0x6e, 0xc7, 0xc1, 0xd8, 0x8e, 0x13, 0x36, 0x11, 0xc4, 0x0f, 0x6d,
	0x41, 0x92, 0x31, 0x15, 0xdc, 0x16, 0x2c, 0xf0, 0x99, 0x84, 0x05, 0xb3, 0x05, 0xe1, 0x01, 0xd7,
	0x9f, 0x96, 0x42, 0x70, 0x45, 0x1d, 0xda, 0x8f, 0xc6, 0x8c, 0x8d, 0x43, 0xaa, 0x65, 0x27, 0xd3,
	0x91, 0x2d, 0xfc, 0x09, 0xe5, 0x82, 0x4c, 0xe2, 0x9b, 0x48, 0x67, 0xb4, 0xcd, 0xbb, 0x52, 0x6f,
	0x9a, 0x10, 0xe1, 0xb3, 0x28, 0xe3, 0xff, 0x19, 0xb2, 0xc9, 0x84, 0x45, 0xb6, 0xfe, 0xd2, 0x60,
	0xf7, 0x1b, 0x02, 0x38, 0x22, 0x3c, 0x78, 0x13, 0x7b, 0x44, 0x50, 0xdc, 0x83, 0x7a, 0x44, 0x67,
	0xae, 0xea, 0x6d, 0xa0, 0x4e, 0xa9, 0xd7, 0xe8, 0x37, 0x2c, 0x3d, 0x96, 0x54, 0x39, 0xb5, 0x88,
	0xce, 0x64, 0xc0, 0xf1, 0x36, 0x34, 0xb9, 0x20, 0x82, 0xbb, 0x53, 0x95, 0x69, 0x94, 0x94, 0xb8,
	0x7b, 0x4b, 0xac, 0x4b, 0x5a, 0x87, 0x52, 0xa5, 0xe3, 0xed, 0x48, 0x24, 0x67, 0x4e, 0x83, 0xdf,
	0x20, 0xed, 0x3d, 0x68, 0xdd, 0x15, 0xe0, 0x16, 0x94, 0x02, 0x7a, 0x66, 0xa0, 0x0e, 0xea, 0x95,
	0x1d, 0x19, 0xe2, 0x2e, 0x54, 0xde, 0x91, 0x70, 0x4a, 0x8d, 0x62, 0x07, 0xf5, 0x1a, 0xfd, 0x66,
	0xd6, 0x45, 0x65, 0x3a, 0x9a, 0x5a, 0x2b, 0x3e, 0x43, 0xdd, 0x4f, 0x08, 0x1a, 0xb2, 0xf5, 0x16,
	0x95, 0x4e, 0x73, 0xfc, 0x3f, 0x2c, 0x48, 0xa5, 0xeb, 0x7b, 0xaa, 0x5a, 0xa3, 0x0f, 0x56, 0x76,
	0xfb, 0x81, 0xe7, 0x54, 0x25, 0x35, 0xf0, 0xf0, 0x0a, 0x94, 0x22, 0x36, 0xcb, 0x4a, 0xb7, 0x2d,
	0xed, 0xa2, 0x95, 0xbb, 0x68, 0x1d, 0xe5, 0x36, 0x3b, 0x52, 0x86, 0x57, 0x61, 0x29, 0x66, 0x61,
	0xe8, 0x2a, 0xf7, 0xdd, 0x53, 0x9f, 0x0b, 0x36, 0x4e, 0xc8, 0xc4, 0x28, 0x75, 0x50, 0xaf, 0xe9,
	0x60, 0xc9, 0xa9, 0x8c, 0x97, 0x39, 0xd3, 0xfd, 0x5c, 0x84, 0xb2, 0x1c, 0x0a, 0xb7, 0xa1, 0xf8,
	0xcb, 0x41, 0x8a, 0xbe, 0x87, 0x1f, 0x43, 0x6d, 0x42, 0x05, 0xf1, 0x88, 0x20, 0xd9, 0x24, 0x8b,
	0xb9, 0xe2, 0x15, 0x15, 0x64, 0xe0, 0x39, 0xd7, 0x3c, 0x7e, 0x00, 0xe5, 0xc0, 0x8f, 0x3c, 0xd5,
	0x72, 0xb1, 0xdf, 0xba, 0x65, 0xb9, 0xb5, 0xeb, 0x47, 0x9e, 0xa3, 0x58, 0xfc, 0x10, 0xaa, 0x23,
	0x9f, 0x86, 0x1e, 0x37, 0xca, 0xea, 0x69, 0xfe, 0xca, 0xeb, 0xed, 0x48, 0xd4, 0xc9, 0x48, 0xdc,
	0x83, 0x85, 0x98, 0x24, 0x72, 0x4b, 0x8d, 0x8a, 0xd2, 0x5d, 0xf7, 0x3d, 0x8c, 0x49, 0x34, 0xf0,
	0x9c, 0x9c, 0xc6, 0x2b, 0x50, 0x0b, 0xd9, 0x50, 0x6d, 0x94, 0x51, 0x55, 0x23, 0xb6, 0x72, 0xe9,
	0x5e, 0x86, 0x3b, 0xd7, 0x8a, 0xee, 0x32, 0x94, 0xe5, 0x30, 0xb8, 0x0e, 0x95, 0xc3, 0x83, 0xf5,
	0xe3, 0xfd, 0x56, 0x01, 0x37, 0xa1, 0xb6, 0xb1, 0xf7, 0x7a, 0x73, 0x77, 0xb0, 0xff, 0xa2, 0x85,
	0xba, 0xf3, 0x22, 0x54, 0xd4, 0x03, 0xe2, 0xe7, 0x00, 0xc3, 0x84, 0x12, 0x41, 0x3d, 0x97, 0x88,
	0xcc, 0x9f, 0xfb, 0xde, 0xa1, 0x9e, 0xa9, 0xd7, 0x85, 0x4c, 0xf5, 0x12, 0x16, 0xc7, 0x3a, 0xf5,
	0xf7, 0x4f, 0x58, 0xcf, 0xd4, 0xeb, 0x02, 0x2f, 0x41, 0x65, 0x46, 0x02, 0xca, 0x95, 0x8d, 0x65,
	0x47, 0x1f, 0xf0, 0x7f, 0xd0, 0x94, 0x41, 0xe2, 0x0e, 0x43, 0x16, 0x51, 0xe9, 0x9d, 0x24, 0x1b,
	0x0a, 0xdb, 0x54, 0x10, 0x5e, 0x06, 0x7d, 0x74, 0x65, 0x2d, 0xe9, 0x9a, 0x54, 0x80, 0x82, 0xb6,
	0x24, 0x82, 0x9f, 0x42, 0x3d, 0x24, 0x5c, 0xb8, 0x12, 0xca, 0x9c, 0xba, 0x6f, 0xa6, 0x9a, 0x14,
	0x1f, 0x93, 0x80, 0xe2, 0x55, 0x00, 0xb5, 0x5b, 0xea, 0x07, 0x62, 0x2c, 0xa8, 0xcc, 0xbf, 0x73,
	0x8f, 0x0f, 0x58, 0x18, 0xea, 0x85, 0xaf, 0xc7, 0x79, 0x88, 0xff, 0x05, 0xe0, 0x34, 0x1c, 0xb9,
	0xfa, 0x26, 0x35, 0x35, 0x4a, 0x5d, 0x22, 0xb2, 0x1e, 0xdf, 0x78, 0x7f, 0x3e, 0x37, 0x0b, 0x17,
	0x73, 0xb3, 0x70, 0x35, 0x37, 0xd1, 0x87, 0xd4, 0x44, 0x5f, 0x52, 0x13, 0x7d, 0x4d, 0x4d, 0x74,
	0x9e, 0x9a, 0xe8, 0x7b, 0x6a, 0xa2, 0x1f, 0xa9, 0x59, 0xb8, 0x4a, 0x4d, 0xf4, 0xf1, 0xd2, 0x2c,
	0x9c, 0x5f, 0x9a, 0x85, 0x8b, 0x4b, 0xb3, 0xf0, 0x76, 0x67, 0xec, 0x8b, 0xd3, 0xe9, 0x89, 0x6c,
	0x6c, 0x8f, 0x13, 0x32, 0x22, 0x11, 0xb1, 0x43, 0x16, 0xf8, 0xf6, 0x9f, 0xfd, 0x9d, 0x9d, 0x54,
	0xd5, 0xe1, 0xc9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xdf, 0xb1, 0x5a, 0x07, 0x05, 0x00,
	0x00,
}

func (x Task_Kind) String() string {
	s, ok := Task_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TaskUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskUpdate)
	if !ok {
		that2, ok := that.(TaskUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NewTasks) != len(that1.NewTasks) {
		return false
	}
	for i := range this.NewTasks {
		if !this.NewTasks[i].Equal(that1.NewTasks[i]) {
			return false
		}
	}
	if len(this.StatsUpdate) != len(that1.StatsUpdate) {
		return false
	}
	for i := range this.StatsUpdate {
		if !this.StatsUpdate[i].Equal(that1.StatsUpdate[i]) {
			return false
		}
	}
	return true
}
func (this *TaskDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskDetails)
	if !ok {
		that2, ok := that.(TaskDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskId.Equal(that1.TaskId) {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	if !bytes.Equal(this.PollTimesHistogram, that1.PollTimesHistogram) {
		return false
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if len(this.Parents) != len(that1.Parents) {
		return false
	}
	for i := range this.Parents {
		if !this.Parents[i].Equal(that1.Parents[i]) {
			return false
		}
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	return true
}
func (this *Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.DroppedAt.Equal(that1.DroppedAt) {
		return false
	}
	if this.Wakes != that1.Wakes {
		return false
	}
	if this.WakerClones != that1.WakerClones {
		return false
	}
	if this.WakerDrops != that1.WakerDrops {
		return false
	}
	if !this.LastWake.Equal(that1.LastWake) {
		return false
	}
	if !this.PollStats.Equal(that1.PollStats) {
		return false
	}
	if this.SelfWakes != that1.SelfWakes {
		return false
	}
	return true
}
func (this *TaskUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tasks.TaskUpdate{")
	if this.NewTasks != nil {
		s = append(s, "NewTasks: "+fmt.Sprintf("%#v", this.NewTasks)+",\n")
	}
	keysForStatsUpdate := make([]uint64, 0, len(this.StatsUpdate))
	for k, _ := range this.StatsUpdate {
		keysForStatsUpdate = append(keysForStatsUpdate, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForStatsUpdate)
	mapStringForStatsUpdate := "map[uint64]*Stats{"
	for _, k := range keysForStatsUpdate {
		mapStringForStatsUpdate += fmt.Sprintf("%#v: %#v,", k, this.StatsUpdate[k])
	}
	mapStringForStatsUpdate += "}"
	if this.StatsUpdate != nil {
		s = append(s, "StatsUpdate: "+mapStringForStatsUpdate+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tasks.TaskDetails{")
	if this.TaskId != nil {
		s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	}
	if this.Now != nil {
		s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	}
	s = append(s, "PollTimesHistogram: "+fmt.Sprintf("%#v", this.PollTimesHistogram)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tasks.Task{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	if this.Parents != nil {
		s = append(s, "Parents: "+fmt.Sprintf("%#v", this.Parents)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Stats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tasks.Stats{")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.DroppedAt != nil {
		s = append(s, "DroppedAt: "+fmt.Sprintf("%#v", this.DroppedAt)+",\n")
	}
	s = append(s, "Wakes: "+fmt.Sprintf("%#v", this.Wakes)+",\n")
	s = append(s, "WakerClones: "+fmt.Sprintf("%#v", this.WakerClones)+",\n")
	s = append(s, "WakerDrops: "+fmt.Sprintf("%#v", this.WakerDrops)+",\n")
	if this.LastWake != nil {
		s = append(s, "LastWake: "+fmt.Sprintf("%#v", this.LastWake)+",\n")
	}
	if this.PollStats != nil {
		s = append(s, "PollStats: "+fmt.Sprintf("%#v", this.PollStats)+",\n")
	}
	s = append(s, "SelfWakes: "+fmt.Sprintf("%#v", this.SelfWakes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTasks(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatsUpdate) > 0 {
		for k := range m.StatsUpdate {
			v := m.StatsUpdate[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTasks(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTasks(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTasks(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NewTasks) > 0 {
		for iNdEx := len(m.NewTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTasks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PollTimesHistogram) > 0 {
		i -= len(m.PollTimesHistogram)
		copy(dAtA[i:], m.PollTimesHistogram)
		i = encodeVarintTasks(dAtA, i, uint64(len(m.PollTimesHistogram)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Now != nil {
		{
			size, err := m.Now.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != nil {
		{
			size, err := m.TaskId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parents) > 0 {
		for iNdEx := len(m.Parents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTasks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTasks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Kind != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x18
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SelfWakes != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.SelfWakes))
		i--
		dAtA[i] = 0x40
	}
	if m.PollStats != nil {
		{
			size, err := m.PollStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LastWake != nil {
		{
			size, err := m.LastWake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.WakerDrops != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.WakerDrops))
		i--
		dAtA[i] = 0x28
	}
	if m.WakerClones != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.WakerClones))
		i--
		dAtA[i] = 0x20
	}
	if m.Wakes != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Wakes))
		i--
		dAtA[i] = 0x18
	}
	if m.DroppedAt != nil {
		{
			size, err := m.DroppedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTasks(dAtA []byte, offset int, v uint64) int {
	offset -= sovTasks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewTasks) > 0 {
		for _, e := range m.NewTasks {
			l = e.Size()
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	if len(m.StatsUpdate) > 0 {
		for k, v := range m.StatsUpdate {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTasks(uint64(l))
			}
			mapEntrySize := 1 + sovTasks(uint64(k)) + l
			n += mapEntrySize + 1 + sovTasks(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TaskDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != nil {
		l = m.TaskId.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.Now != nil {
		l = m.Now.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	l = len(m.PollTimesHistogram)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovTasks(uint64(m.Kind))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	if len(m.Parents) > 0 {
		for _, e := range m.Parents {
			l = e.Size()
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	return n
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.DroppedAt != nil {
		l = m.DroppedAt.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.Wakes != 0 {
		n += 1 + sovTasks(uint64(m.Wakes))
	}
	if m.WakerClones != 0 {
		n += 1 + sovTasks(uint64(m.WakerClones))
	}
	if m.WakerDrops != 0 {
		n += 1 + sovTasks(uint64(m.WakerDrops))
	}
	if m.LastWake != nil {
		l = m.LastWake.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.PollStats != nil {
		l = m.PollStats.Size()
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.SelfWakes != 0 {
		n += 1 + sovTasks(uint64(m.SelfWakes))
	}
	return n
}

func sovTasks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTasks(x uint64) (n int) {
	return sovTasks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TaskUpdate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNewTasks := "[]*Task{"
	for _, f := range this.NewTasks {
		repeatedStringForNewTasks += strings.Replace(f.String(), "Task", "Task", 1) + ","
	}
	repeatedStringForNewTasks += "}"
	keysForStatsUpdate := make([]uint64, 0, len(this.StatsUpdate))
	for k, _ := range this.StatsUpdate {
		keysForStatsUpdate = append(keysForStatsUpdate, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForStatsUpdate)
	mapStringForStatsUpdate := "map[uint64]*Stats{"
	for _, k := range keysForStatsUpdate {
		mapStringForStatsUpdate += fmt.Sprintf("%v: %v,", k, this.StatsUpdate[k])
	}
	mapStringForStatsUpdate += "}"
	s := strings.Join([]string{`&TaskUpdate{`,
		`NewTasks:` + repeatedStringForNewTasks + `,`,
		`StatsUpdate:` + mapStringForStatsUpdate + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskDetails{`,
		`TaskId:` + strings.Replace(fmt.Sprintf("%v", this.TaskId), "Id", "common.Id", 1) + `,`,
		`Now:` + strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`PollTimesHistogram:` + fmt.Sprintf("%v", this.PollTimesHistogram) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "common.Field", 1) + ","
	}
	repeatedStringForFields += "}"
	repeatedStringForParents := "[]*SpanId{"
	for _, f := range this.Parents {
		repeatedStringForParents += strings.Replace(fmt.Sprintf("%v", f), "SpanId", "common.SpanId", 1) + ","
	}
	repeatedStringForParents += "}"
	s := strings.Join([]string{`&Task{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "Id", "common.Id", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MetaId", "common.MetaId", 1) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`Parents:` + repeatedStringForParents + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "common.Location", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Stats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Stats{`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`DroppedAt:` + strings.Replace(fmt.Sprintf("%v", this.DroppedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Wakes:` + fmt.Sprintf("%v", this.Wakes) + `,`,
		`WakerClones:` + fmt.Sprintf("%v", this.WakerClones) + `,`,
		`WakerDrops:` + fmt.Sprintf("%v", this.WakerDrops) + `,`,
		`LastWake:` + strings.Replace(fmt.Sprintf("%v", this.LastWake), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`PollStats:` + strings.Replace(fmt.Sprintf("%v", this.PollStats), "PollStats", "common.PollStats", 1) + `,`,
		`SelfWakes:` + fmt.Sprintf("%v", this.SelfWakes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTasks(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTasks = append(m.NewTasks, &Task{})
			if err := m.NewTasks[len(m.NewTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsUpdate == nil {
				m.StatsUpdate = make(map[uint64]*Stats)
			}
			var mapkey uint64
			var mapvalue *Stats
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTasks
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTasks
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Stats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTasks(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTasks
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StatsUpdate[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskId == nil {
				m.TaskId = &common.Id{}
			}
			if err := m.TaskId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Now == nil {
				m.Now = &timestamp.Timestamp{}
			}
			if err := m.Now.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollTimesHistogram", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollTimesHistogram = append(m.PollTimesHistogram[:0], dAtA[iNdEx:postIndex]...)
			if m.PollTimesHistogram == nil {
				m.PollTimesHistogram = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &common.Id{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &common.MetaId{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Task_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &common.Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parents = append(m.Parents, &common.SpanId{})
			if err := m.Parents[len(m.Parents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &common.Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamp.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DroppedAt == nil {
				m.DroppedAt = &timestamp.Timestamp{}
			}
			if err := m.DroppedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wakes", wireType)
			}
			m.Wakes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wakes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WakerClones", wireType)
			}
			m.WakerClones = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WakerClones |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WakerDrops", wireType)
			}
			m.WakerDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WakerDrops |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastWake == nil {
				m.LastWake = &timestamp.Timestamp{}
			}
			if err := m.LastWake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PollStats == nil {
				m.PollStats = &common.PollStats{}
			}
			if err := m.PollStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfWakes", wireType)
			}
			m.SelfWakes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfWakes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTasks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTasks
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTasks
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTasks(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTasks
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTasks = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTasks   = fmt.Errorf("proto: integer overflow")
)
