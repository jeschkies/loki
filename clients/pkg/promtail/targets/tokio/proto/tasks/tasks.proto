syntax = "proto3";

package tasks;
option go_package = "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/tasks";

import "google/timestamp.proto";
import "google/duration.proto";
import "common/common.proto";

// A task state update.
//
// Each `TaskUpdate` contains any task data that has changed since the last
// update. This includes:
// - any new tasks that were spawned since the last update
// - the current stats for any task whose stats changed since the last update
message TaskUpdate {
    // A list of new tasks that were spawned since the last `TaskUpdate` was
    // sent.
    //
    // If this is empty, no new tasks were spawned.
    repeated Task new_tasks = 1;
    // Any task stats that have changed since the last update.
    //
    // This is a map of task IDs (64-bit unsigned integers) to task stats. If a
    // task's ID is not included in this map, then its stats have *not* changed
    // since the last `TaskUpdate` in which they were present. If a task's ID
    // *is* included in this map, the corresponding value represents a complete
    // snapshot of that task's stats at in the current time window.
    map<uint64, Stats> stats_update = 3;
}

// A task details update
message TaskDetails {
    // The task's ID which the details belong to.
    common.Id task_id = 1;

    google.Timestamp now = 2;

    // HdrHistogram.rs `Histogram` serialized to binary in the V2 format
    bytes poll_times_histogram = 3;
}

// Data recorded when a new task is spawned.
message Task {
    // The task's ID.
    //
    // This uniquely identifies this task across all *currently live* tasks.
    // When the task's stats change, or when the task completes, it will be
    // identified by this ID; if the client requires additional information
    // included in the `Task` message, it should store that data and access it
    // by ID.
    common.Id id = 1;
    // The numeric ID of the task's `Metadata`.
    //
    // This identifies the `Metadata` that describes the `tracing` span
    // corresponding to this task. The metadata for this ID will have been sent
    // in a prior `RegisterMetadata` message.
    common.MetaId metadata = 2;
    // The category of task this task belongs to.
    Kind kind = 3;

    // A list of `Field` objects attached to this task.
    repeated common.Field fields = 4;

    // An ordered list of span IDs corresponding to the `tracing` span context
    // in which this task was spawned.
    //
    // The first span ID in this list is the immediate parent, followed by that
    // span's parent, and so on. The final ID is the root span of the current
    // trace.
    //
    // If this is empty, there were *no* active spans when the task was spawned.
    //
    // These IDs may correspond to `tracing` spans which are *not* tasks, if
    // additional trace data is being collected.
    repeated common.SpanId parents = 5;
    // The location in code where the task was spawned.
    common.Location location = 6;

    enum Kind {
        SPAWN = 0;
        BLOCKING = 1;
    }

}

// Task performance statistics.
message Stats {
    // Timestamp of when the task was spawned.
    google.Timestamp created_at = 1;
    // Timestamp of when the task was dropped.
    google.Timestamp dropped_at = 2;
    // The total number of times this task's waker has been woken.
    uint64 wakes = 3;
    // The total number of times this task's waker has been cloned.
    uint64 waker_clones = 4;
    // The total number of times this task's waker has been dropped.
    uint64 waker_drops = 5;
    // The timestamp of the most recent time this task has been woken.
    //
    // If this is `None`, the task has not yet been woken.
    google.Timestamp last_wake = 6;
    // Contains task poll statistics.
    common.PollStats poll_stats = 7;
    // The total number of times this task has woken itself.
    uint64 self_wakes = 8;
}
