// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clients/pkg/promtail/targets/tokio/proto/instrument/instrument.proto

package insturment

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	async_ops "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/async_ops"
	common "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/common"
	resources "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/resources"
	tasks "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/tasks"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: In the future allow for the request to specify
// only the data that the caller cares about (i.e. only
// tasks but no resources)
type InstrumentRequest struct {
}

func (m *InstrumentRequest) Reset()      { *m = InstrumentRequest{} }
func (*InstrumentRequest) ProtoMessage() {}
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{0}
}
func (m *InstrumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstrumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstrumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstrumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentRequest.Merge(m, src)
}
func (m *InstrumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *InstrumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentRequest proto.InternalMessageInfo

type TaskDetailsRequest struct {
	Id *common.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TaskDetailsRequest) Reset()      { *m = TaskDetailsRequest{} }
func (*TaskDetailsRequest) ProtoMessage() {}
func (*TaskDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{1}
}
func (m *TaskDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDetailsRequest.Merge(m, src)
}
func (m *TaskDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDetailsRequest proto.InternalMessageInfo

func (m *TaskDetailsRequest) GetId() *common.Id {
	if m != nil {
		return m.Id
	}
	return nil
}

type PauseRequest struct {
}

func (m *PauseRequest) Reset()      { *m = PauseRequest{} }
func (*PauseRequest) ProtoMessage() {}
func (*PauseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{2}
}
func (m *PauseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseRequest.Merge(m, src)
}
func (m *PauseRequest) XXX_Size() int {
	return m.Size()
}
func (m *PauseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseRequest proto.InternalMessageInfo

type ResumeRequest struct {
}

func (m *ResumeRequest) Reset()      { *m = ResumeRequest{} }
func (*ResumeRequest) ProtoMessage() {}
func (*ResumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{3}
}
func (m *ResumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeRequest.Merge(m, src)
}
func (m *ResumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeRequest proto.InternalMessageInfo

// Update carries all information regarding tasks, resources, async operations
// and resource operations in one message. There are a couple of reasons to combine all
// of these into a single message:
//
// - we can use one single timestamp for all the data
// - we can have all the new_metadata in one place
// - things such as async ops and resource ops do not make sense
//   on their own as they have relations to tasks and resources
type Update struct {
	// The system time when this update was recorded.
	//
	// This is the timestamp any durations in the included `Stats` were
	// calculated relative to.
	Now *timestamp.Timestamp `protobuf:"bytes,1,opt,name=now,proto3" json:"now,omitempty"`
	// Task state update.
	TaskUpdate *tasks.TaskUpdate `protobuf:"bytes,2,opt,name=task_update,json=taskUpdate,proto3" json:"task_update,omitempty"`
	// Resource state update.
	ResourceUpdate *resources.ResourceUpdate `protobuf:"bytes,3,opt,name=resource_update,json=resourceUpdate,proto3" json:"resource_update,omitempty"`
	// Async operations state update
	AsyncOpUpdate *async_ops.AsyncOpUpdate `protobuf:"bytes,4,opt,name=async_op_update,json=asyncOpUpdate,proto3" json:"async_op_update,omitempty"`
	// Any new span metadata that was registered since the last update.
	NewMetadata *common.RegisterMetadata `protobuf:"bytes,5,opt,name=new_metadata,json=newMetadata,proto3" json:"new_metadata,omitempty"`
}

func (m *Update) Reset()      { *m = Update{} }
func (*Update) ProtoMessage() {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{4}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetNow() *timestamp.Timestamp {
	if m != nil {
		return m.Now
	}
	return nil
}

func (m *Update) GetTaskUpdate() *tasks.TaskUpdate {
	if m != nil {
		return m.TaskUpdate
	}
	return nil
}

func (m *Update) GetResourceUpdate() *resources.ResourceUpdate {
	if m != nil {
		return m.ResourceUpdate
	}
	return nil
}

func (m *Update) GetAsyncOpUpdate() *async_ops.AsyncOpUpdate {
	if m != nil {
		return m.AsyncOpUpdate
	}
	return nil
}

func (m *Update) GetNewMetadata() *common.RegisterMetadata {
	if m != nil {
		return m.NewMetadata
	}
	return nil
}

type PauseResponse struct {
}

func (m *PauseResponse) Reset()      { *m = PauseResponse{} }
func (*PauseResponse) ProtoMessage() {}
func (*PauseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{5}
}
func (m *PauseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseResponse.Merge(m, src)
}
func (m *PauseResponse) XXX_Size() int {
	return m.Size()
}
func (m *PauseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PauseResponse proto.InternalMessageInfo

type ResumeResponse struct {
}

func (m *ResumeResponse) Reset()      { *m = ResumeResponse{} }
func (*ResumeResponse) ProtoMessage() {}
func (*ResumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b6d8fc1efdebcfa, []int{6}
}
func (m *ResumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeResponse.Merge(m, src)
}
func (m *ResumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InstrumentRequest)(nil), "instrument.InstrumentRequest")
	proto.RegisterType((*TaskDetailsRequest)(nil), "instrument.TaskDetailsRequest")
	proto.RegisterType((*PauseRequest)(nil), "instrument.PauseRequest")
	proto.RegisterType((*ResumeRequest)(nil), "instrument.ResumeRequest")
	proto.RegisterType((*Update)(nil), "instrument.Update")
	proto.RegisterType((*PauseResponse)(nil), "instrument.PauseResponse")
	proto.RegisterType((*ResumeResponse)(nil), "instrument.ResumeResponse")
}

func init() {
	proto.RegisterFile("clients/pkg/promtail/targets/tokio/proto/instrument/instrument.proto", fileDescriptor_7b6d8fc1efdebcfa)
}

var fileDescriptor_7b6d8fc1efdebcfa = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x3d, 0x6f, 0x13, 0x41,
	0x10, 0xbd, 0x75, 0x48, 0x8a, 0xb1, 0x63, 0xc7, 0x9b, 0xc6, 0x3e, 0x89, 0x15, 0x72, 0x05, 0x12,
	0xba, 0x8d, 0x4c, 0x89, 0x84, 0x48, 0x14, 0x8a, 0x80, 0x10, 0xe8, 0x14, 0x84, 0x44, 0x63, 0xad,
	0xed, 0xcd, 0xe5, 0x64, 0xdf, 0xed, 0x71, 0xbb, 0x27, 0x8b, 0x0e, 0xfe, 0x01, 0xbf, 0x81, 0x8a,
	0x86, 0xff, 0x41, 0xe9, 0x32, 0x25, 0x3e, 0x37, 0x94, 0xf9, 0x09, 0xe8, 0xf6, 0xc3, 0x3e, 0x2b,
	0x69, 0x68, 0xec, 0xd9, 0xf7, 0xf6, 0x3d, 0xef, 0xbc, 0x19, 0x19, 0xce, 0x27, 0xf3, 0x98, 0xa7,
	0x4a, 0xd2, 0x6c, 0x16, 0xd1, 0x2c, 0x17, 0x89, 0x62, 0xf1, 0x9c, 0x2a, 0x96, 0x47, 0x5c, 0x49,
	0xaa, 0xc4, 0x2c, 0x16, 0x15, 0xac, 0x04, 0x8d, 0x53, 0xa9, 0xf2, 0x22, 0xe1, 0xa9, 0xaa, 0x95,
	0x81, 0xe6, 0x30, 0x6c, 0x11, 0xff, 0x49, 0x24, 0x44, 0x34, 0xe7, 0x46, 0x35, 0x2e, 0xae, 0xa8,
	0x8a, 0x13, 0x2e, 0x15, 0x4b, 0xb2, 0x6d, 0x65, 0x64, 0xfe, 0xf1, 0x44, 0x24, 0x89, 0x48, 0xa9,
	0xf9, 0xb2, 0x60, 0x57, 0x31, 0x39, 0x93, 0x54, 0x7f, 0x5a, 0xa8, 0x9f, 0x73, 0x29, 0x8a, 0x7c,
	0xc2, 0x25, 0xdd, 0x54, 0x8e, 0x62, 0xf2, 0x4b, 0x3a, 0x19, 0x89, 0x4c, 0xd2, 0x4d, 0x65, 0xa8,
	0xc1, 0x31, 0x74, 0x2f, 0x36, 0xcf, 0x0a, 0xf9, 0xe7, 0x82, 0x4b, 0x35, 0x38, 0x01, 0x7c, 0xc9,
	0xe4, 0xec, 0x9c, 0x57, 0x7d, 0x4a, 0x8b, 0x62, 0x1f, 0x1a, 0xf1, 0xb4, 0x87, 0x1e, 0xa1, 0xc7,
	0xcd, 0x21, 0x04, 0xf6, 0x39, 0x17, 0xd3, 0xb0, 0x11, 0x4f, 0x07, 0x6d, 0x68, 0xbd, 0x67, 0x85,
	0xe4, 0xce, 0xa1, 0x03, 0x87, 0x21, 0x97, 0x45, 0xb2, 0x01, 0x7e, 0x35, 0xe0, 0xe0, 0x43, 0x36,
	0x65, 0x8a, 0xe3, 0xa7, 0xb0, 0x97, 0x8a, 0x85, 0x35, 0xf2, 0x03, 0x93, 0x44, 0xe0, 0x92, 0x08,
	0x2e, 0x5d, 0xff, 0x61, 0x75, 0x0d, 0x0f, 0xa1, 0x59, 0x75, 0x39, 0x2a, 0xb4, 0xb8, 0xd7, 0xd0,
	0xaa, 0x6e, 0x60, 0x3a, 0xaf, 0x5e, 0x69, 0x5c, 0x43, 0x50, 0x9b, 0x1a, 0x9f, 0x41, 0xc7, 0x45,
	0xe0, 0x74, 0x7b, 0x5a, 0xd7, 0x0f, 0xb6, 0xd1, 0x84, 0xb6, 0xb2, 0xfa, 0x76, 0xbe, 0x73, 0xc6,
	0x2f, 0xa1, 0xe3, 0xb2, 0x72, 0x1e, 0x0f, 0xb4, 0x47, 0x2f, 0xd8, 0x66, 0x78, 0x5a, 0x55, 0xef,
	0x32, 0x6b, 0x71, 0xc8, 0xea, 0x47, 0xfc, 0x1c, 0x5a, 0x29, 0x5f, 0x8c, 0x12, 0xae, 0xd8, 0x94,
	0x29, 0xd6, 0xdb, 0xb7, 0x72, 0x9b, 0x5c, 0xc8, 0xa3, 0x58, 0x2a, 0x9e, 0xbf, 0xb5, 0x7c, 0xd8,
	0x4c, 0xf9, 0xc2, 0x1d, 0xaa, 0x00, 0x6d, 0xa0, 0x32, 0x13, 0xa9, 0xe4, 0x83, 0x23, 0x68, 0xbb,
	0x44, 0x0d, 0x32, 0xfc, 0xd1, 0x00, 0xd8, 0xce, 0x0e, 0xbf, 0x82, 0xd6, 0x47, 0xa6, 0x26, 0xd7,
	0xe6, 0xd7, 0x25, 0x7e, 0x18, 0xd4, 0x36, 0xf0, 0xce, 0x8c, 0x7d, 0x5c, 0xa7, 0x8d, 0x66, 0xe0,
	0x9d, 0x20, 0xfc, 0x1a, 0x8e, 0xb4, 0x4d, 0x6d, 0x01, 0x30, 0xa9, 0xdf, 0xbd, 0xbb, 0x19, 0x3e,
	0xae, 0x8d, 0xc3, 0x52, 0xda, 0xeb, 0x05, 0xec, 0xeb, 0x26, 0x70, 0xaf, 0x6e, 0x50, 0x5f, 0x14,
	0xbf, 0x7f, 0x0f, 0x63, 0x3b, 0xf6, 0xf0, 0x29, 0x1c, 0x98, 0x9e, 0xf1, 0xce, 0xb5, 0x9d, 0xcd,
	0xf2, 0xfd, 0xfb, 0x28, 0x67, 0x71, 0xf6, 0x0d, 0x2d, 0x57, 0xc4, 0xbb, 0x59, 0x11, 0xef, 0x76,
	0x45, 0xd0, 0xd7, 0x92, 0xa0, 0x9f, 0x25, 0x41, 0xbf, 0x4b, 0x82, 0x96, 0x25, 0x41, 0x7f, 0x4a,
	0x82, 0xfe, 0x96, 0xc4, 0xbb, 0x2d, 0x09, 0xfa, 0xbe, 0x26, 0xde, 0x72, 0x4d, 0xbc, 0x9b, 0x35,
	0xf1, 0x3e, 0xbd, 0x89, 0x62, 0x75, 0x5d, 0x8c, 0xab, 0x59, 0xd1, 0x28, 0x67, 0x57, 0x2c, 0x65,
	0x74, 0x2e, 0x66, 0x31, 0xfd, 0xaf, 0x7f, 0x82, 0x22, 0xaf, 0x1e, 0x35, 0x3e, 0xd0, 0xc8, 0xb3,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x80, 0x96, 0xd1, 0x39, 0x47, 0x04, 0x00, 0x00,
}

func (this *InstrumentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstrumentRequest)
	if !ok {
		that2, ok := that.(InstrumentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TaskDetailsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskDetailsRequest)
	if !ok {
		that2, ok := that.(TaskDetailsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *PauseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PauseRequest)
	if !ok {
		that2, ok := that.(PauseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResumeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResumeRequest)
	if !ok {
		that2, ok := that.(ResumeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Update) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Update)
	if !ok {
		that2, ok := that.(Update)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	if !this.TaskUpdate.Equal(that1.TaskUpdate) {
		return false
	}
	if !this.ResourceUpdate.Equal(that1.ResourceUpdate) {
		return false
	}
	if !this.AsyncOpUpdate.Equal(that1.AsyncOpUpdate) {
		return false
	}
	if !this.NewMetadata.Equal(that1.NewMetadata) {
		return false
	}
	return true
}
func (this *PauseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PauseResponse)
	if !ok {
		that2, ok := that.(PauseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResumeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResumeResponse)
	if !ok {
		that2, ok := that.(ResumeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *InstrumentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&insturment.InstrumentRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskDetailsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&insturment.TaskDetailsRequest{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PauseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&insturment.PauseRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResumeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&insturment.ResumeRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Update) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&insturment.Update{")
	if this.Now != nil {
		s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	}
	if this.TaskUpdate != nil {
		s = append(s, "TaskUpdate: "+fmt.Sprintf("%#v", this.TaskUpdate)+",\n")
	}
	if this.ResourceUpdate != nil {
		s = append(s, "ResourceUpdate: "+fmt.Sprintf("%#v", this.ResourceUpdate)+",\n")
	}
	if this.AsyncOpUpdate != nil {
		s = append(s, "AsyncOpUpdate: "+fmt.Sprintf("%#v", this.AsyncOpUpdate)+",\n")
	}
	if this.NewMetadata != nil {
		s = append(s, "NewMetadata: "+fmt.Sprintf("%#v", this.NewMetadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PauseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&insturment.PauseResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResumeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&insturment.ResumeResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInstrument(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InstrumentClient is the client API for Instrument service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstrumentClient interface {
	WatchUpdates(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (Instrument_WatchUpdatesClient, error)
	WatchTaskDetails(ctx context.Context, in *TaskDetailsRequest, opts ...grpc.CallOption) (Instrument_WatchTaskDetailsClient, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error)
}

type instrumentClient struct {
	cc *grpc.ClientConn
}

func NewInstrumentClient(cc *grpc.ClientConn) InstrumentClient {
	return &instrumentClient{cc}
}

func (c *instrumentClient) WatchUpdates(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (Instrument_WatchUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Instrument_serviceDesc.Streams[0], "/instrument.Instrument/WatchUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &instrumentWatchUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Instrument_WatchUpdatesClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type instrumentWatchUpdatesClient struct {
	grpc.ClientStream
}

func (x *instrumentWatchUpdatesClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instrumentClient) WatchTaskDetails(ctx context.Context, in *TaskDetailsRequest, opts ...grpc.CallOption) (Instrument_WatchTaskDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Instrument_serviceDesc.Streams[1], "/instrument.Instrument/WatchTaskDetails", opts...)
	if err != nil {
		return nil, err
	}
	x := &instrumentWatchTaskDetailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Instrument_WatchTaskDetailsClient interface {
	Recv() (*tasks.TaskDetails, error)
	grpc.ClientStream
}

type instrumentWatchTaskDetailsClient struct {
	grpc.ClientStream
}

func (x *instrumentWatchTaskDetailsClient) Recv() (*tasks.TaskDetails, error) {
	m := new(tasks.TaskDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instrumentClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/instrument.Instrument/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentClient) Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error) {
	out := new(ResumeResponse)
	err := c.cc.Invoke(ctx, "/instrument.Instrument/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentServer is the server API for Instrument service.
type InstrumentServer interface {
	WatchUpdates(*InstrumentRequest, Instrument_WatchUpdatesServer) error
	WatchTaskDetails(*TaskDetailsRequest, Instrument_WatchTaskDetailsServer) error
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Resume(context.Context, *ResumeRequest) (*ResumeResponse, error)
}

// UnimplementedInstrumentServer can be embedded to have forward compatible implementations.
type UnimplementedInstrumentServer struct {
}

func (*UnimplementedInstrumentServer) WatchUpdates(req *InstrumentRequest, srv Instrument_WatchUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUpdates not implemented")
}
func (*UnimplementedInstrumentServer) WatchTaskDetails(req *TaskDetailsRequest, srv Instrument_WatchTaskDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTaskDetails not implemented")
}
func (*UnimplementedInstrumentServer) Pause(ctx context.Context, req *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedInstrumentServer) Resume(ctx context.Context, req *ResumeRequest) (*ResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}

func RegisterInstrumentServer(s *grpc.Server, srv InstrumentServer) {
	s.RegisterService(&_Instrument_serviceDesc, srv)
}

func _Instrument_WatchUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstrumentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstrumentServer).WatchUpdates(m, &instrumentWatchUpdatesServer{stream})
}

type Instrument_WatchUpdatesServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type instrumentWatchUpdatesServer struct {
	grpc.ServerStream
}

func (x *instrumentWatchUpdatesServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Instrument_WatchTaskDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskDetailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstrumentServer).WatchTaskDetails(m, &instrumentWatchTaskDetailsServer{stream})
}

type Instrument_WatchTaskDetailsServer interface {
	Send(*tasks.TaskDetails) error
	grpc.ServerStream
}

type instrumentWatchTaskDetailsServer struct {
	grpc.ServerStream
}

func (x *instrumentWatchTaskDetailsServer) Send(m *tasks.TaskDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Instrument_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.Instrument/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instrument_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.Instrument/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServer).Resume(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Instrument_serviceDesc = grpc.ServiceDesc{
	ServiceName: "instrument.Instrument",
	HandlerType: (*InstrumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pause",
			Handler:    _Instrument_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Instrument_Resume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchUpdates",
			Handler:       _Instrument_WatchUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchTaskDetails",
			Handler:       _Instrument_WatchTaskDetails_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clients/pkg/promtail/targets/tokio/proto/instrument/instrument.proto",
}

func (m *InstrumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstrumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstrumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TaskDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstrument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewMetadata != nil {
		{
			size, err := m.NewMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstrument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AsyncOpUpdate != nil {
		{
			size, err := m.AsyncOpUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstrument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ResourceUpdate != nil {
		{
			size, err := m.ResourceUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstrument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskUpdate != nil {
		{
			size, err := m.TaskUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstrument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Now != nil {
		{
			size, err := m.Now.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstrument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintInstrument(dAtA []byte, offset int, v uint64) int {
	offset -= sovInstrument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InstrumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TaskDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovInstrument(uint64(l))
	}
	return n
}

func (m *PauseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Now != nil {
		l = m.Now.Size()
		n += 1 + l + sovInstrument(uint64(l))
	}
	if m.TaskUpdate != nil {
		l = m.TaskUpdate.Size()
		n += 1 + l + sovInstrument(uint64(l))
	}
	if m.ResourceUpdate != nil {
		l = m.ResourceUpdate.Size()
		n += 1 + l + sovInstrument(uint64(l))
	}
	if m.AsyncOpUpdate != nil {
		l = m.AsyncOpUpdate.Size()
		n += 1 + l + sovInstrument(uint64(l))
	}
	if m.NewMetadata != nil {
		l = m.NewMetadata.Size()
		n += 1 + l + sovInstrument(uint64(l))
	}
	return n
}

func (m *PauseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovInstrument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInstrument(x uint64) (n int) {
	return sovInstrument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InstrumentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstrumentRequest{`,
		`}`,
	}, "")
	return s
}
func (this *TaskDetailsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskDetailsRequest{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "Id", "common.Id", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PauseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PauseRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResumeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResumeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Update) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Update{`,
		`Now:` + strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`TaskUpdate:` + strings.Replace(fmt.Sprintf("%v", this.TaskUpdate), "TaskUpdate", "tasks.TaskUpdate", 1) + `,`,
		`ResourceUpdate:` + strings.Replace(fmt.Sprintf("%v", this.ResourceUpdate), "ResourceUpdate", "resources.ResourceUpdate", 1) + `,`,
		`AsyncOpUpdate:` + strings.Replace(fmt.Sprintf("%v", this.AsyncOpUpdate), "AsyncOpUpdate", "async_ops.AsyncOpUpdate", 1) + `,`,
		`NewMetadata:` + strings.Replace(fmt.Sprintf("%v", this.NewMetadata), "RegisterMetadata", "common.RegisterMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PauseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PauseResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ResumeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResumeResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringInstrument(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InstrumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstrumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstrumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstrument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstrument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &common.Id{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstrument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstrument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Now == nil {
				m.Now = &timestamp.Timestamp{}
			}
			if err := m.Now.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstrument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstrument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskUpdate == nil {
				m.TaskUpdate = &tasks.TaskUpdate{}
			}
			if err := m.TaskUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstrument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstrument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceUpdate == nil {
				m.ResourceUpdate = &resources.ResourceUpdate{}
			}
			if err := m.ResourceUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncOpUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstrument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstrument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AsyncOpUpdate == nil {
				m.AsyncOpUpdate = &async_ops.AsyncOpUpdate{}
			}
			if err := m.AsyncOpUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstrument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstrument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewMetadata == nil {
				m.NewMetadata = &common.RegisterMetadata{}
			}
			if err := m.NewMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInstrument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstrument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInstrument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInstrument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstrument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInstrument
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInstrument
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInstrument
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInstrument(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInstrument
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInstrument = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInstrument   = fmt.Errorf("proto: integer overflow")
)
