syntax = "proto3";

package rs.tokio.console.async_ops;

option go_package = "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/async_ops";

import "google/timestamp.proto";
import "google/duration.proto";
import "common/common.proto";


// An AsyncOp state update.
//
// An async operation is a an operation that is associated with a resource
// This could, for example, be a a read or write on a TCP stream or a receive operation on
// a channel.
message AsyncOpUpdate {
    // A list of new async operations that were created since the last `AsyncOpUpdate`
    // was sent. Note that the fact that an async operation has been created
    // does not mean that is has been polled or is being polled. This information
    // is reflected in the Stats of the operation.
    repeated AsyncOp new_async_ops = 1;
    // Any async op stats that have changed since the last update.
    map<uint64, Stats> stats_update = 2;
}

message AsyncOp {
    // The async op's ID.
    //
    // This uniquely identifies this op across all *currently live*
    // ones.
    common.Id id = 1;
    // The numeric ID of the op's `Metadata`.
    //
    // This identifies the `Metadata` that describes the `tracing` span
    // corresponding to this async op. The metadata for this ID will have been sent
    // in a prior `RegisterMetadata` message.
    common.MetaId metadata = 2;
    // The source of this async operation. Most commonly this should be the name
    // of the method where the instantiation of this op has happened.
    string source = 3;
}


message Stats {
    // Timestamp of when the async op has been created.
    google.protobuf.Timestamp created_at = 1;
    // Timestamp of when the async op was dropped.
    google.protobuf.Timestamp dropped_at = 2;
    // The resource Id this `AsyncOp` is associated with. Note that both
    // `resource_id` and `task_id` can be None if this async op has not been polled yet
    common.Id resource_id = 3;
    // The Id of the task that is awaiting on this op.
    common.Id task_id = 4;
    // Contains the operation poll stats.
    common.PollStats poll_stats = 5;
}

