// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clients/pkg/promtail/targets/tokio/proto/common/common.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Metadata_Kind int32

const (
	SPAN  Metadata_Kind = 0
	EVENT Metadata_Kind = 1
)

var Metadata_Kind_name = map[int32]string{
	0: "SPAN",
	1: "EVENT",
}

var Metadata_Kind_value = map[string]int32{
	"SPAN":  0,
	"EVENT": 1,
}

func (Metadata_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{7, 0}
}

type Metadata_Level int32

const (
	ERROR Metadata_Level = 0
	WARN  Metadata_Level = 1
	INFO  Metadata_Level = 2
	DEBUG Metadata_Level = 3
	TRACE Metadata_Level = 4
)

var Metadata_Level_name = map[int32]string{
	0: "ERROR",
	1: "WARN",
	2: "INFO",
	3: "DEBUG",
	4: "TRACE",
}

var Metadata_Level_value = map[string]int32{
	"ERROR": 0,
	"WARN":  1,
	"INFO":  2,
	"DEBUG": 3,
	"TRACE": 4,
}

func (Metadata_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{7, 1}
}

type Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Id) Reset()      { *m = Id{} }
func (*Id) ProtoMessage() {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{0}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return m.Size()
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

/// A Rust source code location.
type Location struct {
	// The file path
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// The Rust module path
	ModulePath string `protobuf:"bytes,2,opt,name=module_path,json=modulePath,proto3" json:"module_path,omitempty"`
	// The line number in the source code file.
	Line uint32 `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	// The character in `line`.
	Column uint32 `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`
}

func (m *Location) Reset()      { *m = Location{} }
func (*Location) ProtoMessage() {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{1}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Location) GetModulePath() string {
	if m != nil {
		return m.ModulePath
	}
	return ""
}

func (m *Location) GetLine() uint32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Location) GetColumn() uint32 {
	if m != nil {
		return m.Column
	}
	return 0
}

type MetaId struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MetaId) Reset()      { *m = MetaId{} }
func (*MetaId) ProtoMessage() {}
func (*MetaId) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{2}
}
func (m *MetaId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaId.Merge(m, src)
}
func (m *MetaId) XXX_Size() int {
	return m.Size()
}
func (m *MetaId) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaId.DiscardUnknown(m)
}

var xxx_messageInfo_MetaId proto.InternalMessageInfo

func (m *MetaId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SpanId struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SpanId) Reset()      { *m = SpanId{} }
func (*SpanId) ProtoMessage() {}
func (*SpanId) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{3}
}
func (m *SpanId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanId.Merge(m, src)
}
func (m *SpanId) XXX_Size() int {
	return m.Size()
}
func (m *SpanId) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanId.DiscardUnknown(m)
}

var xxx_messageInfo_SpanId proto.InternalMessageInfo

func (m *SpanId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// A message representing a key-value pair of data associated with a `Span`
type Field struct {
	// Types that are valid to be assigned to Name:
	//	*Field_StrName
	//	*Field_NameIdx
	Name isField_Name `protobuf_oneof:"name"`
	// Types that are valid to be assigned to Value:
	//	*Field_DebugVal
	//	*Field_StrVal
	//	*Field_U64Val
	//	*Field_I64Val
	//	*Field_BoolVal
	Value      isField_Value `protobuf_oneof:"value"`
	MetadataId *MetaId       `protobuf:"bytes,8,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
}

func (m *Field) Reset()      { *m = Field{} }
func (*Field) ProtoMessage() {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{4}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return m.Size()
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

type isField_Name interface {
	isField_Name()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isField_Value interface {
	isField_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Field_StrName struct {
	StrName string `protobuf:"bytes,1,opt,name=str_name,json=strName,proto3,oneof"`
}
type Field_NameIdx struct {
	NameIdx uint64 `protobuf:"varint,2,opt,name=name_idx,json=nameIdx,proto3,oneof"`
}
type Field_DebugVal struct {
	DebugVal string `protobuf:"bytes,3,opt,name=debug_val,json=debugVal,proto3,oneof"`
}
type Field_StrVal struct {
	StrVal string `protobuf:"bytes,4,opt,name=str_val,json=strVal,proto3,oneof"`
}
type Field_U64Val struct {
	U64Val uint64 `protobuf:"varint,5,opt,name=u64_val,json=u64Val,proto3,oneof"`
}
type Field_I64Val struct {
	I64Val int64 `protobuf:"zigzag64,6,opt,name=i64_val,json=i64Val,proto3,oneof"`
}
type Field_BoolVal struct {
	BoolVal bool `protobuf:"varint,7,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

func (*Field_StrName) isField_Name()   {}
func (*Field_NameIdx) isField_Name()   {}
func (*Field_DebugVal) isField_Value() {}
func (*Field_StrVal) isField_Value()   {}
func (*Field_U64Val) isField_Value()   {}
func (*Field_I64Val) isField_Value()   {}
func (*Field_BoolVal) isField_Value()  {}

func (m *Field) GetName() isField_Name {
	if m != nil {
		return m.Name
	}
	return nil
}
func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Field) GetStrName() string {
	if x, ok := m.GetName().(*Field_StrName); ok {
		return x.StrName
	}
	return ""
}

func (m *Field) GetNameIdx() uint64 {
	if x, ok := m.GetName().(*Field_NameIdx); ok {
		return x.NameIdx
	}
	return 0
}

func (m *Field) GetDebugVal() string {
	if x, ok := m.GetValue().(*Field_DebugVal); ok {
		return x.DebugVal
	}
	return ""
}

func (m *Field) GetStrVal() string {
	if x, ok := m.GetValue().(*Field_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (m *Field) GetU64Val() uint64 {
	if x, ok := m.GetValue().(*Field_U64Val); ok {
		return x.U64Val
	}
	return 0
}

func (m *Field) GetI64Val() int64 {
	if x, ok := m.GetValue().(*Field_I64Val); ok {
		return x.I64Val
	}
	return 0
}

func (m *Field) GetBoolVal() bool {
	if x, ok := m.GetValue().(*Field_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (m *Field) GetMetadataId() *MetaId {
	if m != nil {
		return m.MetadataId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Field) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Field_StrName)(nil),
		(*Field_NameIdx)(nil),
		(*Field_DebugVal)(nil),
		(*Field_StrVal)(nil),
		(*Field_U64Val)(nil),
		(*Field_I64Val)(nil),
		(*Field_BoolVal)(nil),
	}
}

type Span struct {
	Id         *SpanId              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetadataId *MetaId              `protobuf:"bytes,2,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	Fields     []*Field             `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	At         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=at,proto3" json:"at,omitempty"`
}

func (m *Span) Reset()      { *m = Span{} }
func (*Span) ProtoMessage() {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{5}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return m.Size()
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetId() *SpanId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Span) GetMetadataId() *MetaId {
	if m != nil {
		return m.MetadataId
	}
	return nil
}

func (m *Span) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Span) GetAt() *timestamp.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

type RegisterMetadata struct {
	Metadata []*RegisterMetadata_NewMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RegisterMetadata) Reset()      { *m = RegisterMetadata{} }
func (*RegisterMetadata) ProtoMessage() {}
func (*RegisterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{6}
}
func (m *RegisterMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetadata.Merge(m, src)
}
func (m *RegisterMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RegisterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetadata proto.InternalMessageInfo

func (m *RegisterMetadata) GetMetadata() []*RegisterMetadata_NewMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type RegisterMetadata_NewMetadata struct {
	Id       *MetaId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RegisterMetadata_NewMetadata) Reset()      { *m = RegisterMetadata_NewMetadata{} }
func (*RegisterMetadata_NewMetadata) ProtoMessage() {}
func (*RegisterMetadata_NewMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{6, 0}
}
func (m *RegisterMetadata_NewMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterMetadata_NewMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterMetadata_NewMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterMetadata_NewMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetadata_NewMetadata.Merge(m, src)
}
func (m *RegisterMetadata_NewMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RegisterMetadata_NewMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetadata_NewMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetadata_NewMetadata proto.InternalMessageInfo

func (m *RegisterMetadata_NewMetadata) GetId() *MetaId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RegisterMetadata_NewMetadata) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Metadata struct {
	Name       string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target     string         `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	ModulePath string         `protobuf:"bytes,3,opt,name=module_path,json=modulePath,proto3" json:"module_path,omitempty"`
	Location   *Location      `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Kind       Metadata_Kind  `protobuf:"varint,5,opt,name=kind,proto3,enum=common.Metadata_Kind" json:"kind,omitempty"`
	Level      Metadata_Level `protobuf:"varint,6,opt,name=level,proto3,enum=common.Metadata_Level" json:"level,omitempty"`
	// The names of the key-value fields attached to the
	// span or event this metadata is associated with.
	FieldNames []string `protobuf:"bytes,7,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{7}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Metadata) GetModulePath() string {
	if m != nil {
		return m.ModulePath
	}
	return ""
}

func (m *Metadata) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Metadata) GetKind() Metadata_Kind {
	if m != nil {
		return m.Kind
	}
	return SPAN
}

func (m *Metadata) GetLevel() Metadata_Level {
	if m != nil {
		return m.Level
	}
	return ERROR
}

func (m *Metadata) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

// Contains stats about objects that can be polled. Currently these can be:
// - tasks that have been spawned
// - async operations on resources that are performed within the context of a task
type PollStats struct {
	// The total number of times this object has been polled.
	Polls uint64 `protobuf:"varint,1,opt,name=polls,proto3" json:"polls,omitempty"`
	// The timestamp of the first time this object was polled.
	//
	// If this is `None`, the object has not yet been polled.
	//
	// Subtracting this timestamp from `created_at` can be used to calculate the
	// time to first poll for this object, a measurement of executor latency.
	FirstPoll *timestamp.Timestamp `protobuf:"bytes,3,opt,name=first_poll,json=firstPoll,proto3" json:"first_poll,omitempty"`
	// The timestamp of the most recent time this objects's poll method was invoked.
	//
	// If this is `None`, the object has not yet been polled.
	//
	// If the object has only been polled a single time, then this value may be
	// equal to the `first_poll` timestamp.
	//
	LastPollStarted *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_poll_started,json=lastPollStarted,proto3" json:"last_poll_started,omitempty"`
	// The timestamp of the most recent time this objects's poll method finished execution.
	//
	// If this is `None`, the object has not yet been polled or is currently being polled.
	//
	// If the object does not exist anymore, then this is the time the final invocation of
	// its poll method has completed.
	LastPollEnded *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_poll_ended,json=lastPollEnded,proto3" json:"last_poll_ended,omitempty"`
	// The total duration this object was being *actively polled*, summed across
	// all polls. Note that this includes only polls that have completed and is
	// not reflecting any inprogress polls. Subtracting `busy_time` from the
	// total lifetime of the polled object results in the amount of time it
	// has spent *waiting* to be polled.
	BusyTime *duration.Duration `protobuf:"bytes,6,opt,name=busy_time,json=busyTime,proto3" json:"busy_time,omitempty"`
}

func (m *PollStats) Reset()      { *m = PollStats{} }
func (*PollStats) ProtoMessage() {}
func (*PollStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6229399148a79, []int{8}
}
func (m *PollStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollStats.Merge(m, src)
}
func (m *PollStats) XXX_Size() int {
	return m.Size()
}
func (m *PollStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PollStats.DiscardUnknown(m)
}

var xxx_messageInfo_PollStats proto.InternalMessageInfo

func (m *PollStats) GetPolls() uint64 {
	if m != nil {
		return m.Polls
	}
	return 0
}

func (m *PollStats) GetFirstPoll() *timestamp.Timestamp {
	if m != nil {
		return m.FirstPoll
	}
	return nil
}

func (m *PollStats) GetLastPollStarted() *timestamp.Timestamp {
	if m != nil {
		return m.LastPollStarted
	}
	return nil
}

func (m *PollStats) GetLastPollEnded() *timestamp.Timestamp {
	if m != nil {
		return m.LastPollEnded
	}
	return nil
}

func (m *PollStats) GetBusyTime() *duration.Duration {
	if m != nil {
		return m.BusyTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.Metadata_Kind", Metadata_Kind_name, Metadata_Kind_value)
	proto.RegisterEnum("common.Metadata_Level", Metadata_Level_name, Metadata_Level_value)
	proto.RegisterType((*Id)(nil), "common.Id")
	proto.RegisterType((*Location)(nil), "common.Location")
	proto.RegisterType((*MetaId)(nil), "common.MetaId")
	proto.RegisterType((*SpanId)(nil), "common.SpanId")
	proto.RegisterType((*Field)(nil), "common.Field")
	proto.RegisterType((*Span)(nil), "common.Span")
	proto.RegisterType((*RegisterMetadata)(nil), "common.RegisterMetadata")
	proto.RegisterType((*RegisterMetadata_NewMetadata)(nil), "common.RegisterMetadata.NewMetadata")
	proto.RegisterType((*Metadata)(nil), "common.Metadata")
	proto.RegisterType((*PollStats)(nil), "common.PollStats")
}

func init() {
	proto.RegisterFile("clients/pkg/promtail/targets/tokio/proto/common/common.proto", fileDescriptor_afa6229399148a79)
}

var fileDescriptor_afa6229399148a79 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xac, 0xd7, 0xeb, 0xf5, 0xb3, 0x92, 0x9a, 0x51, 0xa9, 0xb6, 0x89, 0x58, 0x2c, 0x0b,
	0x24, 0x17, 0x45, 0x5e, 0xc9, 0x54, 0x91, 0x90, 0x7a, 0x20, 0xa6, 0x4e, 0x13, 0xd1, 0xba, 0xd1,
	0x24, 0x14, 0x09, 0x0e, 0xd6, 0x38, 0x3b, 0x76, 0x46, 0x9e, 0xdd, 0xb5, 0x76, 0x67, 0x43, 0x39,
	0x20, 0xf1, 0x13, 0xfa, 0x13, 0x38, 0x22, 0x6e, 0xfc, 0x0b, 0x8e, 0x39, 0x56, 0x9c, 0x88, 0x73,
	0xe1, 0xd8, 0x9f, 0x80, 0x66, 0x76, 0xd6, 0x0d, 0x4e, 0x54, 0xe8, 0x29, 0x33, 0xef, 0xfb, 0xde,
	0xf7, 0x9e, 0xbf, 0x79, 0x6f, 0x03, 0x8f, 0x4e, 0x05, 0x67, 0xb1, 0xcc, 0x82, 0xc5, 0x7c, 0x16,
	0x2c, 0xd2, 0x24, 0x92, 0x94, 0x8b, 0x40, 0xd2, 0x74, 0xc6, 0x64, 0x16, 0xc8, 0x64, 0xce, 0x13,
	0x15, 0x96, 0x49, 0x70, 0x9a, 0x44, 0x51, 0x12, 0x9b, 0x3f, 0x3d, 0x1d, 0xc3, 0x4e, 0x71, 0xdb,
	0x7a, 0x30, 0x4b, 0x92, 0x99, 0x60, 0x05, 0x73, 0x92, 0x4f, 0x03, 0xc9, 0x23, 0x96, 0x49, 0x1a,
	0x2d, 0xde, 0x9e, 0x8a, 0x94, 0x2d, 0x7f, 0x9d, 0x1a, 0xe6, 0x29, 0x95, 0xbc, 0x94, 0xec, 0xdc,
	0x05, 0xeb, 0x30, 0xc4, 0x9b, 0x60, 0xf1, 0xd0, 0x43, 0x6d, 0xd4, 0xb5, 0x89, 0xc5, 0xc3, 0xce,
	0x1c, 0xdc, 0xa7, 0xc9, 0xa9, 0xe6, 0x61, 0x0c, 0xf6, 0x94, 0x0b, 0xa6, 0xd1, 0x06, 0xd1, 0x67,
	0xfc, 0x31, 0x34, 0xa3, 0x24, 0xcc, 0x05, 0x1b, 0x2f, 0xa8, 0x3c, 0xf3, 0x2c, 0x0d, 0x41, 0x11,
	0x3a, 0xa2, 0xf2, 0x4c, 0x25, 0x09, 0x1e, 0x33, 0xaf, 0xda, 0x46, 0xdd, 0x0d, 0xa2, 0xcf, 0xf8,
	0x1e, 0x38, 0xa7, 0x89, 0xc8, 0xa3, 0xd8, 0xb3, 0x75, 0xd4, 0xdc, 0x3a, 0x1e, 0x38, 0xcf, 0x98,
	0xa4, 0xb7, 0xb4, 0xe1, 0x81, 0x73, 0xbc, 0xa0, 0xf1, 0x2d, 0xc8, 0x2b, 0x0b, 0x6a, 0xfb, 0x9c,
	0x89, 0x10, 0x6f, 0x83, 0x9b, 0xc9, 0x74, 0x1c, 0xd3, 0xc8, 0xb4, 0x78, 0x50, 0x21, 0xf5, 0x4c,
	0xa6, 0x23, 0x1a, 0x31, 0x05, 0x2a, 0x60, 0xcc, 0xc3, 0x97, 0xba, 0x49, 0x5b, 0x81, 0x2a, 0x72,
	0x18, 0xbe, 0xc4, 0x1f, 0x41, 0x23, 0x64, 0x93, 0x7c, 0x36, 0x3e, 0xa7, 0x42, 0x37, 0xda, 0x38,
	0x40, 0xc4, 0xd5, 0xa1, 0x17, 0x54, 0xe0, 0xfb, 0xa0, 0x64, 0x34, 0x68, 0x1b, 0xd0, 0xc9, 0x64,
	0x6a, 0xa0, 0x7c, 0xf7, 0xa1, 0x86, 0x6a, 0x5a, 0x15, 0x11, 0x27, 0xdf, 0x7d, 0x68, 0x20, 0x6e,
	0x20, 0xa7, 0x8d, 0xba, 0x58, 0x41, 0xbc, 0x80, 0xb6, 0xc1, 0x9d, 0x24, 0x89, 0xd0, 0x58, 0xbd,
	0x8d, 0xba, 0xee, 0x01, 0x22, 0x75, 0x15, 0x51, 0x60, 0x00, 0xcd, 0x88, 0x49, 0x1a, 0x52, 0x49,
	0xc7, 0x3c, 0xf4, 0xdc, 0x36, 0xea, 0x36, 0xfb, 0x9b, 0x3d, 0xf3, 0xfc, 0x85, 0x3f, 0x04, 0x4a,
	0xca, 0x61, 0x38, 0x70, 0xc0, 0x56, 0x3f, 0x64, 0x50, 0x87, 0xda, 0x39, 0x15, 0x39, 0xeb, 0xfc,
	0x86, 0xc0, 0x56, 0x6e, 0x61, 0x7f, 0xe5, 0xd5, 0x35, 0x85, 0xc2, 0x47, 0xe5, 0xdd, 0x7a, 0x29,
	0xeb, 0xbf, 0x4a, 0xe1, 0x4f, 0xc1, 0x99, 0x2a, 0xaf, 0x33, 0xaf, 0xda, 0xae, 0x76, 0x9b, 0xfd,
	0x8d, 0x92, 0xab, 0x5f, 0x80, 0x18, 0x10, 0x7f, 0x06, 0x16, 0x95, 0xda, 0xab, 0x66, 0x7f, 0xab,
	0x57, 0xcc, 0x5d, 0xaf, 0x9c, 0xbb, 0xde, 0x49, 0x39, 0x98, 0xc4, 0xa2, 0xb2, 0xf3, 0x3b, 0x82,
	0x16, 0x61, 0x33, 0x9e, 0x49, 0x96, 0x3e, 0x33, 0x95, 0xf0, 0x97, 0xe0, 0x96, 0x55, 0x3d, 0xa4,
	0x2b, 0x7d, 0x52, 0x56, 0x5a, 0xe7, 0xf6, 0x46, 0xec, 0x87, 0xf2, 0x4c, 0x56, 0x59, 0x5b, 0xdf,
	0x43, 0xf3, 0x1a, 0x70, 0xbb, 0x13, 0xe6, 0x07, 0x2a, 0x27, 0x76, 0xae, 0x15, 0x2c, 0x6c, 0x68,
	0x5d, 0x67, 0xfd, 0x5b, 0xbc, 0xf3, 0xa7, 0x05, 0xee, 0x4a, 0x1a, 0x17, 0xf6, 0x97, 0x5b, 0xa1,
	0xce, 0x6a, 0xc0, 0x8b, 0x4d, 0x36, 0x0b, 0x61, 0x6e, 0xeb, 0xdb, 0x52, 0xbd, 0xb1, 0x2d, 0x3b,
	0xe0, 0x0a, 0xb3, 0x6e, 0xc6, 0xbf, 0x55, 0x1f, 0xe5, 0x1a, 0x92, 0x15, 0x03, 0x3f, 0x00, 0x7b,
	0xce, 0xe3, 0x50, 0x8f, 0xde, 0x66, 0xff, 0xc3, 0xf5, 0x8e, 0x7b, 0x5f, 0xf3, 0x38, 0x24, 0x9a,
	0x82, 0x77, 0xa0, 0x26, 0xd8, 0x39, 0x2b, 0x66, 0x71, 0xb3, 0x7f, 0xef, 0x06, 0xf7, 0xa9, 0x42,
	0x49, 0x41, 0x52, 0x7d, 0xea, 0xa7, 0xd4, 0xcb, 0x94, 0x79, 0xf5, 0x76, 0x55, 0xf5, 0xa9, 0x43,
	0x6a, 0x9b, 0xb2, 0xce, 0x36, 0xd8, 0x4a, 0x1c, 0xbb, 0x60, 0x1f, 0x1f, 0xed, 0x8d, 0x5a, 0x15,
	0xdc, 0x80, 0xda, 0xf0, 0xc5, 0x70, 0x74, 0xd2, 0x42, 0x9d, 0x47, 0x50, 0xd3, 0x6a, 0x3a, 0x46,
	0xc8, 0x73, 0xd2, 0xaa, 0x28, 0xe2, 0xb7, 0x7b, 0x64, 0xd4, 0x42, 0xea, 0x74, 0x38, 0xda, 0x7f,
	0xde, 0xb2, 0x14, 0xfc, 0x78, 0x38, 0xf8, 0xe6, 0x49, 0xab, 0xaa, 0x8e, 0x27, 0x64, 0xef, 0xab,
	0x61, 0xcb, 0xee, 0xfc, 0x62, 0x41, 0xe3, 0x28, 0x11, 0xe2, 0x58, 0x52, 0x99, 0xe1, 0xbb, 0x50,
	0x5b, 0x24, 0x42, 0x64, 0x66, 0xe3, 0x8b, 0x0b, 0xfe, 0x02, 0x60, 0xca, 0xd3, 0x4c, 0x8e, 0xd5,
	0x55, 0xdb, 0xf8, 0xee, 0x41, 0x6b, 0x68, 0xb6, 0x52, 0xc5, 0xfb, 0xf0, 0x81, 0xa0, 0x26, 0x73,
	0x9c, 0x49, 0x9a, 0x4a, 0x16, 0xfe, 0x8f, 0x51, 0xbd, 0xa3, 0x92, 0x4c, 0x5b, 0x2a, 0x05, 0x0f,
	0xe0, 0xce, 0x5b, 0x1d, 0x16, 0x87, 0xac, 0x78, 0x86, 0x77, 0xab, 0x6c, 0x94, 0x2a, 0x43, 0x95,
	0x80, 0x77, 0xa1, 0x31, 0xc9, 0xb3, 0x1f, 0xc7, 0xea, 0x53, 0xad, 0x1f, 0xa6, 0xd9, 0xbf, 0x7f,
	0x23, 0xfb, 0xb1, 0xf9, 0x4c, 0x13, 0x57, 0x71, 0x95, 0xd6, 0xe0, 0xa7, 0x8b, 0x4b, 0xbf, 0xf2,
	0xfa, 0xd2, 0xaf, 0xbc, 0xb9, 0xf4, 0xd1, 0xcf, 0x4b, 0x1f, 0xfd, 0xba, 0xf4, 0xd1, 0x1f, 0x4b,
	0x1f, 0x5d, 0x2c, 0x7d, 0xf4, 0xd7, 0xd2, 0x47, 0x7f, 0x2f, 0xfd, 0xca, 0x9b, 0xa5, 0x8f, 0x5e,
	0x5d, 0xf9, 0x95, 0x8b, 0x2b, 0xbf, 0xf2, 0xfa, 0xca, 0xaf, 0x7c, 0xf7, 0x64, 0xc6, 0xe5, 0x59,
	0x3e, 0x51, 0x2f, 0x1f, 0xcc, 0x52, 0x3a, 0xa5, 0x31, 0x0d, 0x44, 0x32, 0xe7, 0xc1, 0x7b, 0xfe,
	0x27, 0x9a, 0x38, 0xfa, 0xf6, 0xf9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x4d, 0x05, 0x94,
	0xc3, 0x06, 0x00, 0x00,
}

func (x Metadata_Kind) String() string {
	s, ok := Metadata_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Metadata_Level) String() string {
	s, ok := Metadata_Level_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Id) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Id)
	if !ok {
		that2, ok := that.(Id)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Location) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.File != that1.File {
		return false
	}
	if this.ModulePath != that1.ModulePath {
		return false
	}
	if this.Line != that1.Line {
		return false
	}
	if this.Column != that1.Column {
		return false
	}
	return true
}
func (this *MetaId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaId)
	if !ok {
		that2, ok := that.(MetaId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SpanId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpanId)
	if !ok {
		that2, ok := that.(SpanId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Field) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field)
	if !ok {
		that2, ok := that.(Field)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Name == nil {
		if this.Name != nil {
			return false
		}
	} else if this.Name == nil {
		return false
	} else if !this.Name.Equal(that1.Name) {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	if !this.MetadataId.Equal(that1.MetadataId) {
		return false
	}
	return true
}
func (this *Field_StrName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_StrName)
	if !ok {
		that2, ok := that.(Field_StrName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StrName != that1.StrName {
		return false
	}
	return true
}
func (this *Field_NameIdx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_NameIdx)
	if !ok {
		that2, ok := that.(Field_NameIdx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NameIdx != that1.NameIdx {
		return false
	}
	return true
}
func (this *Field_DebugVal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_DebugVal)
	if !ok {
		that2, ok := that.(Field_DebugVal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DebugVal != that1.DebugVal {
		return false
	}
	return true
}
func (this *Field_StrVal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_StrVal)
	if !ok {
		that2, ok := that.(Field_StrVal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StrVal != that1.StrVal {
		return false
	}
	return true
}
func (this *Field_U64Val) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_U64Val)
	if !ok {
		that2, ok := that.(Field_U64Val)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.U64Val != that1.U64Val {
		return false
	}
	return true
}
func (this *Field_I64Val) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_I64Val)
	if !ok {
		that2, ok := that.(Field_I64Val)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.I64Val != that1.I64Val {
		return false
	}
	return true
}
func (this *Field_BoolVal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field_BoolVal)
	if !ok {
		that2, ok := that.(Field_BoolVal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolVal != that1.BoolVal {
		return false
	}
	return true
}
func (this *Span) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Span)
	if !ok {
		that2, ok := that.(Span)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.MetadataId.Equal(that1.MetadataId) {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if !this.At.Equal(that1.At) {
		return false
	}
	return true
}
func (this *RegisterMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterMetadata)
	if !ok {
		that2, ok := that.(RegisterMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterMetadata_NewMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterMetadata_NewMetadata)
	if !ok {
		that2, ok := that.(RegisterMetadata_NewMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.ModulePath != that1.ModulePath {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if len(this.FieldNames) != len(that1.FieldNames) {
		return false
	}
	for i := range this.FieldNames {
		if this.FieldNames[i] != that1.FieldNames[i] {
			return false
		}
	}
	return true
}
func (this *PollStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollStats)
	if !ok {
		that2, ok := that.(PollStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polls != that1.Polls {
		return false
	}
	if !this.FirstPoll.Equal(that1.FirstPoll) {
		return false
	}
	if !this.LastPollStarted.Equal(that1.LastPollStarted) {
		return false
	}
	if !this.LastPollEnded.Equal(that1.LastPollEnded) {
		return false
	}
	if !this.BusyTime.Equal(that1.BusyTime) {
		return false
	}
	return true
}
func (this *Id) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common.Id{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Location) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common.Location{")
	s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	s = append(s, "ModulePath: "+fmt.Sprintf("%#v", this.ModulePath)+",\n")
	s = append(s, "Line: "+fmt.Sprintf("%#v", this.Line)+",\n")
	s = append(s, "Column: "+fmt.Sprintf("%#v", this.Column)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common.MetaId{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpanId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common.SpanId{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Field) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&common.Field{")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	if this.MetadataId != nil {
		s = append(s, "MetadataId: "+fmt.Sprintf("%#v", this.MetadataId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Field_StrName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_StrName{` +
		`StrName:` + fmt.Sprintf("%#v", this.StrName) + `}`}, ", ")
	return s
}
func (this *Field_NameIdx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_NameIdx{` +
		`NameIdx:` + fmt.Sprintf("%#v", this.NameIdx) + `}`}, ", ")
	return s
}
func (this *Field_DebugVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_DebugVal{` +
		`DebugVal:` + fmt.Sprintf("%#v", this.DebugVal) + `}`}, ", ")
	return s
}
func (this *Field_StrVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_StrVal{` +
		`StrVal:` + fmt.Sprintf("%#v", this.StrVal) + `}`}, ", ")
	return s
}
func (this *Field_U64Val) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_U64Val{` +
		`U64Val:` + fmt.Sprintf("%#v", this.U64Val) + `}`}, ", ")
	return s
}
func (this *Field_I64Val) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_I64Val{` +
		`I64Val:` + fmt.Sprintf("%#v", this.I64Val) + `}`}, ", ")
	return s
}
func (this *Field_BoolVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Field_BoolVal{` +
		`BoolVal:` + fmt.Sprintf("%#v", this.BoolVal) + `}`}, ", ")
	return s
}
func (this *Span) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common.Span{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.MetadataId != nil {
		s = append(s, "MetadataId: "+fmt.Sprintf("%#v", this.MetadataId)+",\n")
	}
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	if this.At != nil {
		s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common.RegisterMetadata{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterMetadata_NewMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common.RegisterMetadata_NewMetadata{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&common.Metadata{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "ModulePath: "+fmt.Sprintf("%#v", this.ModulePath)+",\n")
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "FieldNames: "+fmt.Sprintf("%#v", this.FieldNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common.PollStats{")
	s = append(s, "Polls: "+fmt.Sprintf("%#v", this.Polls)+",\n")
	if this.FirstPoll != nil {
		s = append(s, "FirstPoll: "+fmt.Sprintf("%#v", this.FirstPoll)+",\n")
	}
	if this.LastPollStarted != nil {
		s = append(s, "LastPollStarted: "+fmt.Sprintf("%#v", this.LastPollStarted)+",\n")
	}
	if this.LastPollEnded != nil {
		s = append(s, "LastPollEnded: "+fmt.Sprintf("%#v", this.LastPollEnded)+",\n")
	}
	if this.BusyTime != nil {
		s = append(s, "BusyTime: "+fmt.Sprintf("%#v", this.BusyTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommon(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Column != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Column))
		i--
		dAtA[i] = 0x20
	}
	if m.Line != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ModulePath) > 0 {
		i -= len(m.ModulePath)
		copy(dAtA[i:], m.ModulePath)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ModulePath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetaId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpanId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MetadataId != nil {
		{
			size, err := m.MetadataId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Name != nil {
		{
			size := m.Name.Size()
			i -= size
			if _, err := m.Name.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Field_StrName) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_StrName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StrName)
	copy(dAtA[i:], m.StrName)
	i = encodeVarintCommon(dAtA, i, uint64(len(m.StrName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Field_NameIdx) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_NameIdx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCommon(dAtA, i, uint64(m.NameIdx))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *Field_DebugVal) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_DebugVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DebugVal)
	copy(dAtA[i:], m.DebugVal)
	i = encodeVarintCommon(dAtA, i, uint64(len(m.DebugVal)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Field_StrVal) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_StrVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StrVal)
	copy(dAtA[i:], m.StrVal)
	i = encodeVarintCommon(dAtA, i, uint64(len(m.StrVal)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *Field_U64Val) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_U64Val) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCommon(dAtA, i, uint64(m.U64Val))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *Field_I64Val) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_I64Val) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCommon(dAtA, i, uint64((uint64(m.I64Val)<<1)^uint64((m.I64Val>>63))))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *Field_BoolVal) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Field_BoolVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolVal {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Span) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.At != nil {
		{
			size, err := m.At.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MetadataId != nil {
		{
			size, err := m.MetadataId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisterMetadata_NewMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterMetadata_NewMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterMetadata_NewMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldNames) > 0 {
		for iNdEx := len(m.FieldNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldNames[iNdEx])
			copy(dAtA[i:], m.FieldNames[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.FieldNames[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Level != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if m.Kind != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x28
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModulePath) > 0 {
		i -= len(m.ModulePath)
		copy(dAtA[i:], m.ModulePath)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ModulePath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusyTime != nil {
		{
			size, err := m.BusyTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastPollEnded != nil {
		{
			size, err := m.LastPollEnded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LastPollStarted != nil {
		{
			size, err := m.LastPollStarted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FirstPoll != nil {
		{
			size, err := m.FirstPoll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Polls != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Polls))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ModulePath)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Line != 0 {
		n += 1 + sovCommon(uint64(m.Line))
	}
	if m.Column != 0 {
		n += 1 + sovCommon(uint64(m.Column))
	}
	return n
}

func (m *MetaId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	return n
}

func (m *SpanId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	return n
}

func (m *Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		n += m.Name.Size()
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.MetadataId != nil {
		l = m.MetadataId.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Field_StrName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrName)
	n += 1 + l + sovCommon(uint64(l))
	return n
}
func (m *Field_NameIdx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCommon(uint64(m.NameIdx))
	return n
}
func (m *Field_DebugVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DebugVal)
	n += 1 + l + sovCommon(uint64(l))
	return n
}
func (m *Field_StrVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrVal)
	n += 1 + l + sovCommon(uint64(l))
	return n
}
func (m *Field_U64Val) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCommon(uint64(m.U64Val))
	return n
}
func (m *Field_I64Val) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozCommon(uint64(m.I64Val))
	return n
}
func (m *Field_BoolVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.MetadataId != nil {
		l = m.MetadataId.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.At != nil {
		l = m.At.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *RegisterMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *RegisterMetadata_NewMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ModulePath)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovCommon(uint64(m.Kind))
	}
	if m.Level != 0 {
		n += 1 + sovCommon(uint64(m.Level))
	}
	if len(m.FieldNames) > 0 {
		for _, s := range m.FieldNames {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *PollStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polls != 0 {
		n += 1 + sovCommon(uint64(m.Polls))
	}
	if m.FirstPoll != nil {
		l = m.FirstPoll.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LastPollStarted != nil {
		l = m.LastPollStarted.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LastPollEnded != nil {
		l = m.LastPollEnded.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.BusyTime != nil {
		l = m.BusyTime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Id) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Id{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Location) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Location{`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`ModulePath:` + fmt.Sprintf("%v", this.ModulePath) + `,`,
		`Line:` + fmt.Sprintf("%v", this.Line) + `,`,
		`Column:` + fmt.Sprintf("%v", this.Column) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaId{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpanId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpanId{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`MetadataId:` + strings.Replace(this.MetadataId.String(), "MetaId", "MetaId", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_StrName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_StrName{`,
		`StrName:` + fmt.Sprintf("%v", this.StrName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_NameIdx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_NameIdx{`,
		`NameIdx:` + fmt.Sprintf("%v", this.NameIdx) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_DebugVal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_DebugVal{`,
		`DebugVal:` + fmt.Sprintf("%v", this.DebugVal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_StrVal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_StrVal{`,
		`StrVal:` + fmt.Sprintf("%v", this.StrVal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_U64Val) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_U64Val{`,
		`U64Val:` + fmt.Sprintf("%v", this.U64Val) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_I64Val) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_I64Val{`,
		`I64Val:` + fmt.Sprintf("%v", this.I64Val) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field_BoolVal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field_BoolVal{`,
		`BoolVal:` + fmt.Sprintf("%v", this.BoolVal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Span) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(f.String(), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&Span{`,
		`Id:` + strings.Replace(this.Id.String(), "SpanId", "SpanId", 1) + `,`,
		`MetadataId:` + strings.Replace(this.MetadataId.String(), "MetaId", "MetaId", 1) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`At:` + strings.Replace(fmt.Sprintf("%v", this.At), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadata := "[]*RegisterMetadata_NewMetadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(fmt.Sprintf("%v", f), "RegisterMetadata_NewMetadata", "RegisterMetadata_NewMetadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&RegisterMetadata{`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterMetadata_NewMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterMetadata_NewMetadata{`,
		`Id:` + strings.Replace(this.Id.String(), "MetaId", "MetaId", 1) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "Metadata", "Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`ModulePath:` + fmt.Sprintf("%v", this.ModulePath) + `,`,
		`Location:` + strings.Replace(this.Location.String(), "Location", "Location", 1) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`FieldNames:` + fmt.Sprintf("%v", this.FieldNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollStats{`,
		`Polls:` + fmt.Sprintf("%v", this.Polls) + `,`,
		`FirstPoll:` + strings.Replace(fmt.Sprintf("%v", this.FirstPoll), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`LastPollStarted:` + strings.Replace(fmt.Sprintf("%v", this.LastPollStarted), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`LastPollEnded:` + strings.Replace(fmt.Sprintf("%v", this.LastPollEnded), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`BusyTime:` + strings.Replace(fmt.Sprintf("%v", this.BusyTime), "Duration", "duration.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommon(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModulePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModulePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = &Field_StrName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameIdx", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Name = &Field_NameIdx{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Field_DebugVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Field_StrVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64Val", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Field_U64Val{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64Val", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Value = &Field_I64Val{int64(v)}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Field_BoolVal{b}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetadataId == nil {
				m.MetadataId = &MetaId{}
			}
			if err := m.MetadataId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &SpanId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetadataId == nil {
				m.MetadataId = &MetaId{}
			}
			if err := m.MetadataId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.At == nil {
				m.At = &timestamp.Timestamp{}
			}
			if err := m.At.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &RegisterMetadata_NewMetadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterMetadata_NewMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &MetaId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModulePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModulePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Metadata_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Metadata_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldNames = append(m.FieldNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polls", wireType)
			}
			m.Polls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polls |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPoll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstPoll == nil {
				m.FirstPoll = &timestamp.Timestamp{}
			}
			if err := m.FirstPoll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPollStarted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPollStarted == nil {
				m.LastPollStarted = &timestamp.Timestamp{}
			}
			if err := m.LastPollStarted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPollEnded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPollEnded == nil {
				m.LastPollEnded = &timestamp.Timestamp{}
			}
			if err := m.LastPollEnded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusyTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusyTime == nil {
				m.BusyTime = &duration.Duration{}
			}
			if err := m.BusyTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)
