syntax = "proto3";

package common;
option go_package = "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/common";

import "google/timestamp.proto";
import "google/duration.proto";

message Id {
    uint64 id = 1;
}

/// A Rust source code location.
message Location {
    // The file path
    string file = 1;
    // The Rust module path
    string module_path = 2;
    // The line number in the source code file.
    uint32 line = 3;
    // The character in `line`.
    uint32 column = 4;
}

message MetaId {
    uint64 id = 1;
}


message SpanId {
    uint64 id = 1;
}

// A message representing a key-value pair of data associated with a `Span`
message Field {
    oneof name {
        // The string representation of the name.
        string str_name = 1;
        // An index position into the `Metadata.field_names`.
        uint64 name_idx = 2;
    }
    oneof value {
        string debug_val = 3;
        string str_val = 4;
        uint64 u64_val = 5;
        sint64 i64_val = 6;
        bool bool_val = 7;
    }
    MetaId metadata_id = 8;
}

message Span {
    SpanId id = 1;
    MetaId metadata_id = 2;
    repeated Field fields = 3;
    google.Timestamp at = 4;
}

message RegisterMetadata {
    repeated NewMetadata metadata = 1;

    message NewMetadata {
        MetaId id = 1;
        Metadata metadata = 2;
    }
}

message Metadata {
    string name = 1;
    string target = 2;
    string module_path = 3;
    Location location = 4;
    Kind kind = 5;
    Level level = 6;

    // The names of the key-value fields attached to the
    // span or event this metadata is associated with.
    repeated string field_names = 7;

    enum Kind {
        SPAN = 0;
        EVENT = 1;
    }

    enum Level {
        ERROR = 0;
        WARN = 1;
        INFO = 2;
        DEBUG = 3;
        TRACE = 4;
    }
}

// Contains stats about objects that can be polled. Currently these can be:
// - tasks that have been spawned
// - async operations on resources that are performed within the context of a task
message PollStats {
    // The total number of times this object has been polled.
    uint64 polls = 1;
    // The timestamp of the first time this object was polled.
    //
    // If this is `None`, the object has not yet been polled.
    //
    // Subtracting this timestamp from `created_at` can be used to calculate the
    // time to first poll for this object, a measurement of executor latency.
    google.Timestamp first_poll = 3;
    // The timestamp of the most recent time this objects's poll method was invoked.
    //
    // If this is `None`, the object has not yet been polled.
    //
    // If the object has only been polled a single time, then this value may be
    // equal to the `first_poll` timestamp.
    //
    google.Timestamp last_poll_started = 4;
    // The timestamp of the most recent time this objects's poll method finished execution.
    //
    // If this is `None`, the object has not yet been polled or is currently being polled.
    //
    // If the object does not exist anymore, then this is the time the final invocation of
    // its poll method has completed.
    google.Timestamp last_poll_ended = 5;
    // The total duration this object was being *actively polled*, summed across
    // all polls. Note that this includes only polls that have completed and is
    // not reflecting any inprogress polls. Subtracting `busy_time` from the
    // total lifetime of the polled object results in the amount of time it
    // has spent *waiting* to be polled.
    google.Duration busy_time = 6;
}
