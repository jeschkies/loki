// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clients/pkg/promtail/targets/tokio/proto/resources/resources.proto

package resources

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	common "github.com/grafana/loki/clients/pkg/promtail/targets/tokio/proto/common"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Resource_Kind_Known int32

const (
	TIMER Resource_Kind_Known = 0
)

var Resource_Kind_Known_name = map[int32]string{
	0: "TIMER",
}

var Resource_Kind_Known_value = map[string]int32{
	"TIMER": 0,
}

func (Resource_Kind_Known) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{1, 0, 0}
}

// A resource state update.
//
// Each `ResourceUpdate` contains any resource data that has changed since the last
// update. This includes:
// - any new resources that were created since the last update
// - the current stats for any resource whose stats changed since the last update
// - any new poll ops that have been incoked on a resource
type ResourceUpdate struct {
	// A list of new resources that were created since the last `ResourceUpdate` was
	// sent.
	NewResources []*Resource `protobuf:"bytes,1,rep,name=new_resources,json=newResources,proto3" json:"new_resources,omitempty"`
	// Any resource stats that have changed since the last update.
	StatsUpdate map[uint64]*Stats `protobuf:"bytes,2,rep,name=stats_update,json=statsUpdate,proto3" json:"stats_update,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of all new poll ops that have been invoked on resources since the last update.
	NewPollOps []*PollOp `protobuf:"bytes,3,rep,name=new_poll_ops,json=newPollOps,proto3" json:"new_poll_ops,omitempty"`
}

func (m *ResourceUpdate) Reset()      { *m = ResourceUpdate{} }
func (*ResourceUpdate) ProtoMessage() {}
func (*ResourceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{0}
}
func (m *ResourceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUpdate.Merge(m, src)
}
func (m *ResourceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ResourceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUpdate proto.InternalMessageInfo

func (m *ResourceUpdate) GetNewResources() []*Resource {
	if m != nil {
		return m.NewResources
	}
	return nil
}

func (m *ResourceUpdate) GetStatsUpdate() map[uint64]*Stats {
	if m != nil {
		return m.StatsUpdate
	}
	return nil
}

func (m *ResourceUpdate) GetNewPollOps() []*PollOp {
	if m != nil {
		return m.NewPollOps
	}
	return nil
}

// Static data recorded when a new resource is created.
type Resource struct {
	// The resources's ID.
	//
	// This uniquely identifies this resource across all *currently live*
	// resources. This is also the primary way any operations on a resource
	// are associated with it
	Id *common.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The numeric ID of the resources's `Metadata`.
	Metadata *common.MetaId `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The resources's concrete rust type.
	ConcreteType string `protobuf:"bytes,3,opt,name=concrete_type,json=concreteType,proto3" json:"concrete_type,omitempty"`
	// The kind of resource (e.g timer, mutex)
	Kind *Resource_Kind `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// The location in code where the resource was created.
	Location *common.Location `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *Resource) Reset()      { *m = Resource{} }
func (*Resource) ProtoMessage() {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{1}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetId() *common.Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Resource) GetMetadata() *common.MetaId {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Resource) GetConcreteType() string {
	if m != nil {
		return m.ConcreteType
	}
	return ""
}

func (m *Resource) GetKind() *Resource_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Resource) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type Resource_Kind struct {
	// Types that are valid to be assigned to Kind:
	//	*Resource_Kind_Known_
	//	*Resource_Kind_Other
	Kind isResource_Kind_Kind `protobuf_oneof:"kind"`
}

func (m *Resource_Kind) Reset()      { *m = Resource_Kind{} }
func (*Resource_Kind) ProtoMessage() {}
func (*Resource_Kind) Descriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{1, 0}
}
func (m *Resource_Kind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource_Kind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource_Kind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource_Kind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource_Kind.Merge(m, src)
}
func (m *Resource_Kind) XXX_Size() int {
	return m.Size()
}
func (m *Resource_Kind) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource_Kind.DiscardUnknown(m)
}

var xxx_messageInfo_Resource_Kind proto.InternalMessageInfo

type isResource_Kind_Kind interface {
	isResource_Kind_Kind()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Resource_Kind_Known_ struct {
	Known Resource_Kind_Known `protobuf:"varint,1,opt,name=known,proto3,enum=resources.Resource_Kind_Known,oneof"`
}
type Resource_Kind_Other struct {
	Other string `protobuf:"bytes,2,opt,name=other,proto3,oneof"`
}

func (*Resource_Kind_Known_) isResource_Kind_Kind() {}
func (*Resource_Kind_Other) isResource_Kind_Kind()  {}

func (m *Resource_Kind) GetKind() isResource_Kind_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Resource_Kind) GetKnown() Resource_Kind_Known {
	if x, ok := m.GetKind().(*Resource_Kind_Known_); ok {
		return x.Known
	}
	return TIMER
}

func (m *Resource_Kind) GetOther() string {
	if x, ok := m.GetKind().(*Resource_Kind_Other); ok {
		return x.Other
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resource_Kind) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resource_Kind_Known_)(nil),
		(*Resource_Kind_Other)(nil),
	}
}

// Task runtime stats of a resource.
type Stats struct {
	// Timestamp of when the resource was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp of when the resource was dropped.
	DroppedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=dropped_at,json=droppedAt,proto3" json:"dropped_at,omitempty"`
	// State attributes of the resource. These are dependent on the type of the resource.
	// For example, a timer resource will have a duration while a semaphore resource may
	// have permits as an attribute. These values may change over time as the state of
	// the resource changes. Therefore, they live in the runtime stats rather than the
	// static data describing the resource.
	Attributes []*Stats_Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *Stats) Reset()      { *m = Stats{} }
func (*Stats) ProtoMessage() {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{2}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Stats) GetDroppedAt() *timestamp.Timestamp {
	if m != nil {
		return m.DroppedAt
	}
	return nil
}

func (m *Stats) GetAttributes() []*Stats_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Stats_Attribute struct {
	Field *common.Field `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Unit  string        `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (m *Stats_Attribute) Reset()      { *m = Stats_Attribute{} }
func (*Stats_Attribute) ProtoMessage() {}
func (*Stats_Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{2, 0}
}
func (m *Stats_Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats_Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats_Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats_Attribute.Merge(m, src)
}
func (m *Stats_Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Stats_Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Stats_Attribute proto.InternalMessageInfo

func (m *Stats_Attribute) GetField() *common.Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *Stats_Attribute) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type PollOp struct {
	// The numeric ID of the op's `Metadata`.
	//
	// This identifies the `Metadata` that describes the `tracing` span
	// corresponding to this op. The metadata for this ID will have been sent
	// in a prior `RegisterMetadata` message.
	Metadata *common.MetaId `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The resources's ID.
	ResourceId *common.Id `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// the name of this op (e.g. poll_elapsed, new_timeout, reset, etc.)
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Identifies the task context that this poll op has been called from.
	TaskId *common.Id `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Identifies the async op ID that this poll op is part of.
	AsyncOpId *common.Id `protobuf:"bytes,6,opt,name=async_op_id,json=asyncOpId,proto3" json:"async_op_id,omitempty"`
	// Whether this poll op has returned with ready or pending.
	IsReady bool `protobuf:"varint,7,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
}

func (m *PollOp) Reset()      { *m = PollOp{} }
func (*PollOp) ProtoMessage() {}
func (*PollOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2284070aba37ca6d, []int{3}
}
func (m *PollOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOp.Merge(m, src)
}
func (m *PollOp) XXX_Size() int {
	return m.Size()
}
func (m *PollOp) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOp.DiscardUnknown(m)
}

var xxx_messageInfo_PollOp proto.InternalMessageInfo

func (m *PollOp) GetMetadata() *common.MetaId {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PollOp) GetResourceId() *common.Id {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *PollOp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PollOp) GetTaskId() *common.Id {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *PollOp) GetAsyncOpId() *common.Id {
	if m != nil {
		return m.AsyncOpId
	}
	return nil
}

func (m *PollOp) GetIsReady() bool {
	if m != nil {
		return m.IsReady
	}
	return false
}

func init() {
	proto.RegisterEnum("resources.Resource_Kind_Known", Resource_Kind_Known_name, Resource_Kind_Known_value)
	proto.RegisterType((*ResourceUpdate)(nil), "resources.ResourceUpdate")
	proto.RegisterMapType((map[uint64]*Stats)(nil), "resources.ResourceUpdate.StatsUpdateEntry")
	proto.RegisterType((*Resource)(nil), "resources.Resource")
	proto.RegisterType((*Resource_Kind)(nil), "resources.Resource.Kind")
	proto.RegisterType((*Stats)(nil), "resources.Stats")
	proto.RegisterType((*Stats_Attribute)(nil), "resources.Stats.Attribute")
	proto.RegisterType((*PollOp)(nil), "resources.PollOp")
}

func init() {
	proto.RegisterFile("clients/pkg/promtail/targets/tokio/proto/resources/resources.proto", fileDescriptor_2284070aba37ca6d)
}

var fileDescriptor_2284070aba37ca6d = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xf7, 0x24, 0x71, 0x1a, 0xbf, 0xb4, 0x55, 0x98, 0x95, 0x90, 0xf1, 0xc1, 0x8a, 0x52, 0x09,
	0x85, 0x65, 0x65, 0x4b, 0x59, 0x09, 0x2d, 0x7b, 0x6b, 0xc5, 0x22, 0xc2, 0x52, 0xed, 0x6a, 0x28,
	0x17, 0x2e, 0xd6, 0xc4, 0x9e, 0x66, 0x47, 0x71, 0x66, 0x2c, 0x7b, 0x4c, 0x94, 0xdb, 0x7e, 0x04,
	0x3e, 0x02, 0x47, 0xbe, 0x09, 0x1c, 0x7b, 0xdc, 0x23, 0x49, 0x2f, 0x1c, 0xfb, 0x0d, 0x40, 0x33,
	0xb6, 0x93, 0xd2, 0x16, 0xad, 0x7a, 0xca, 0x9b, 0xf7, 0xfb, 0xf3, 0xde, 0x8c, 0x7f, 0x0a, 0x9c,
	0xc5, 0x29, 0x67, 0x42, 0x15, 0x61, 0xb6, 0x98, 0x87, 0x59, 0x2e, 0x97, 0x8a, 0xf2, 0x34, 0x54,
	0x34, 0x9f, 0x33, 0x55, 0x84, 0x4a, 0x2e, 0xb8, 0xd4, 0x6d, 0x25, 0xc3, 0x9c, 0x15, 0xb2, 0xcc,
	0x63, 0x56, 0xec, 0xab, 0xc0, 0x20, 0xd8, 0xd9, 0x35, 0xbc, 0x2f, 0xe6, 0x52, 0xce, 0x53, 0x56,
	0x49, 0x66, 0xe5, 0x65, 0xa8, 0xf8, 0x92, 0x15, 0x8a, 0x2e, 0xb3, 0x7d, 0x55, 0xa9, 0x3c, 0xff,
	0x2e, 0x35, 0x29, 0x73, 0xaa, 0xb8, 0x14, 0x35, 0xfe, 0x24, 0x96, 0xcb, 0xa5, 0x14, 0x61, 0xf5,
	0x53, 0x35, 0x47, 0xbf, 0xb5, 0xe0, 0x98, 0xd4, 0xd3, 0x7e, 0xca, 0x12, 0xaa, 0x18, 0x7e, 0x01,
	0x47, 0x82, 0xad, 0xa2, 0xdd, 0x0e, 0x2e, 0x1a, 0xb6, 0xc7, 0xfd, 0xc9, 0x93, 0x60, 0xbf, 0x66,
	0xa3, 0x20, 0x87, 0x82, 0xad, 0x9a, 0x43, 0x81, 0xcf, 0xe1, 0xb0, 0x50, 0x54, 0x15, 0x51, 0x69,
	0x9c, 0xdc, 0x96, 0x11, 0x3e, 0x7d, 0x40, 0x58, 0x8d, 0x0a, 0x7e, 0xd4, 0xec, 0xaa, 0x7e, 0x25,
	0x54, 0xbe, 0x26, 0xfd, 0x62, 0xdf, 0xc1, 0xcf, 0x41, 0xdb, 0x47, 0x99, 0x4c, 0xd3, 0x48, 0x66,
	0x85, 0xdb, 0x36, 0x76, 0x9f, 0xdc, 0xb2, 0x7b, 0x2b, 0xd3, 0xf4, 0x4d, 0x46, 0x40, 0xb0, 0x55,
	0x55, 0x16, 0xde, 0x5b, 0x18, 0xdc, 0x75, 0xc5, 0x03, 0x68, 0x2f, 0xd8, 0xda, 0x45, 0x43, 0x34,
	0xee, 0x10, 0x5d, 0xe2, 0xcf, 0xc1, 0xfe, 0x85, 0xa6, 0xa5, 0x5e, 0x11, 0x8d, 0xfb, 0x93, 0xc1,
	0x2d, 0x4f, 0xa3, 0x26, 0x15, 0xfc, 0xb2, 0xf5, 0x02, 0x8d, 0xfe, 0x68, 0x41, 0xaf, 0xd9, 0x1b,
	0x7b, 0xd0, 0xe2, 0x89, 0x71, 0xea, 0x4f, 0x20, 0xa8, 0x9f, 0x72, 0x9a, 0x90, 0x16, 0x4f, 0xf0,
	0x53, 0xe8, 0x2d, 0x99, 0xa2, 0x09, 0x55, 0xb4, 0xf6, 0x3d, 0x6e, 0x18, 0xe7, 0x4c, 0xd1, 0x69,
	0x42, 0x76, 0x38, 0x3e, 0x81, 0xa3, 0x58, 0x8a, 0x38, 0x67, 0x8a, 0x45, 0x6a, 0x9d, 0x31, 0xb7,
	0x3d, 0x44, 0x63, 0x87, 0x1c, 0x36, 0xcd, 0x8b, 0x75, 0xc6, 0xf0, 0x33, 0xe8, 0x2c, 0xb8, 0x48,
	0xdc, 0x8e, 0x31, 0x73, 0x1f, 0x78, 0xc7, 0xe0, 0x35, 0x17, 0x09, 0x31, 0x2c, 0xfc, 0x0c, 0x7a,
	0xa9, 0x8c, 0xcd, 0x17, 0x77, 0xed, 0xfa, 0x5a, 0xf5, 0xf8, 0x1f, 0xea, 0x3e, 0xd9, 0x31, 0xbc,
	0x1c, 0x3a, 0x5a, 0x8b, 0xbf, 0x02, 0x7b, 0x21, 0xe4, 0x4a, 0x98, 0x3b, 0x1d, 0x4f, 0xfc, 0xff,
	0x1b, 0x12, 0xbc, 0xd6, 0xac, 0xef, 0x2c, 0x52, 0xd1, 0xf1, 0xa7, 0x60, 0x4b, 0xf5, 0x8e, 0xe5,
	0xe6, 0xa6, 0x8e, 0xee, 0x9b, 0xe3, 0x08, 0x83, 0x6d, 0x98, 0xd8, 0x01, 0xfb, 0x62, 0x7a, 0xfe,
	0x8a, 0x0c, 0xac, 0xb3, 0x6e, 0x75, 0x8f, 0xd1, 0x3f, 0x08, 0x6c, 0xf3, 0xbc, 0xf8, 0x6b, 0x80,
	0x38, 0x67, 0x54, 0xb1, 0x24, 0xa2, 0xaa, 0x7e, 0x4e, 0x2f, 0xa8, 0x02, 0x1c, 0x34, 0x01, 0x0e,
	0x2e, 0x9a, 0x84, 0x13, 0xa7, 0x66, 0x9f, 0x2a, 0x2d, 0x4d, 0x72, 0x99, 0x65, 0x95, 0xb4, 0xf5,
	0x71, 0x69, 0xcd, 0x3e, 0x55, 0xf8, 0x25, 0x00, 0x55, 0x2a, 0xe7, 0xb3, 0x52, 0xb1, 0x26, 0x4e,
	0xde, 0xdd, 0x4f, 0x1f, 0x9c, 0x36, 0x14, 0x72, 0x8b, 0xed, 0x7d, 0x03, 0xce, 0x0e, 0xc0, 0x27,
	0x60, 0x5f, 0x72, 0x96, 0x36, 0x41, 0x38, 0x6a, 0xde, 0xf9, 0x5b, 0xdd, 0x24, 0x15, 0x86, 0x31,
	0x74, 0x4a, 0xc1, 0xab, 0x15, 0x1d, 0x62, 0xea, 0xd1, 0x06, 0x41, 0xb7, 0x4a, 0xea, 0xa3, 0xd2,
	0xf2, 0x25, 0xf4, 0x9b, 0x2d, 0x23, 0x9e, 0x98, 0xac, 0xfc, 0x37, 0x7e, 0xd0, 0xc0, 0x53, 0x33,
	0x57, 0xd0, 0x25, 0x33, 0xa9, 0x71, 0x88, 0xa9, 0xf1, 0x09, 0x1c, 0x28, 0x5a, 0x2c, 0xb4, 0xd8,
	0xbe, 0x27, 0xee, 0x6a, 0x68, 0xaa, 0xf3, 0xdb, 0xa7, 0xc5, 0x5a, 0xc4, 0x91, 0xcc, 0x34, 0xb1,
	0x7b, 0x8f, 0xe8, 0x18, 0xf8, 0x4d, 0x36, 0x4d, 0xf0, 0x67, 0xd0, 0xe3, 0x45, 0x94, 0x33, 0x9a,
	0xac, 0xdd, 0x83, 0x21, 0x1a, 0xf7, 0xc8, 0x01, 0x2f, 0x88, 0x3e, 0x9e, 0xbd, 0x47, 0x57, 0x1b,
	0xdf, 0xfa, 0xb0, 0xf1, 0xad, 0x9b, 0x8d, 0x8f, 0xde, 0x6f, 0x7d, 0xf4, 0xfb, 0xd6, 0x47, 0x7f,
	0x6e, 0x7d, 0x74, 0xb5, 0xf5, 0xd1, 0x5f, 0x5b, 0x1f, 0xfd, 0xbd, 0xf5, 0xad, 0x9b, 0xad, 0x8f,
	0x7e, 0xbd, 0xf6, 0xad, 0xab, 0x6b, 0xdf, 0xfa, 0x70, 0xed, 0x5b, 0x3f, 0x7f, 0x3f, 0xe7, 0xea,
	0x5d, 0x39, 0xd3, 0xe3, 0xc2, 0x79, 0x4e, 0x2f, 0xa9, 0xa0, 0x61, 0x2a, 0x17, 0x3c, 0x7c, 0xfc,
	0x1f, 0xea, 0xac, 0x6b, 0x1a, 0xcf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xc5, 0x3c, 0xa9,
	0x8d, 0x05, 0x00, 0x00,
}

func (x Resource_Kind_Known) String() string {
	s, ok := Resource_Kind_Known_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ResourceUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceUpdate)
	if !ok {
		that2, ok := that.(ResourceUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NewResources) != len(that1.NewResources) {
		return false
	}
	for i := range this.NewResources {
		if !this.NewResources[i].Equal(that1.NewResources[i]) {
			return false
		}
	}
	if len(this.StatsUpdate) != len(that1.StatsUpdate) {
		return false
	}
	for i := range this.StatsUpdate {
		if !this.StatsUpdate[i].Equal(that1.StatsUpdate[i]) {
			return false
		}
	}
	if len(this.NewPollOps) != len(that1.NewPollOps) {
		return false
	}
	for i := range this.NewPollOps {
		if !this.NewPollOps[i].Equal(that1.NewPollOps[i]) {
			return false
		}
	}
	return true
}
func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.ConcreteType != that1.ConcreteType {
		return false
	}
	if !this.Kind.Equal(that1.Kind) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	return true
}
func (this *Resource_Kind) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource_Kind)
	if !ok {
		that2, ok := that.(Resource_Kind)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Kind == nil {
		if this.Kind != nil {
			return false
		}
	} else if this.Kind == nil {
		return false
	} else if !this.Kind.Equal(that1.Kind) {
		return false
	}
	return true
}
func (this *Resource_Kind_Known_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource_Kind_Known_)
	if !ok {
		that2, ok := that.(Resource_Kind_Known_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Known != that1.Known {
		return false
	}
	return true
}
func (this *Resource_Kind_Other) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource_Kind_Other)
	if !ok {
		that2, ok := that.(Resource_Kind_Other)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Other != that1.Other {
		return false
	}
	return true
}
func (this *Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.DroppedAt.Equal(that1.DroppedAt) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	return true
}
func (this *Stats_Attribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats_Attribute)
	if !ok {
		that2, ok := that.(Stats_Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Field.Equal(that1.Field) {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	return true
}
func (this *PollOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollOp)
	if !ok {
		that2, ok := that.(PollOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.ResourceId.Equal(that1.ResourceId) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.TaskId.Equal(that1.TaskId) {
		return false
	}
	if !this.AsyncOpId.Equal(that1.AsyncOpId) {
		return false
	}
	if this.IsReady != that1.IsReady {
		return false
	}
	return true
}
func (this *ResourceUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&resources.ResourceUpdate{")
	if this.NewResources != nil {
		s = append(s, "NewResources: "+fmt.Sprintf("%#v", this.NewResources)+",\n")
	}
	keysForStatsUpdate := make([]uint64, 0, len(this.StatsUpdate))
	for k, _ := range this.StatsUpdate {
		keysForStatsUpdate = append(keysForStatsUpdate, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForStatsUpdate)
	mapStringForStatsUpdate := "map[uint64]*Stats{"
	for _, k := range keysForStatsUpdate {
		mapStringForStatsUpdate += fmt.Sprintf("%#v: %#v,", k, this.StatsUpdate[k])
	}
	mapStringForStatsUpdate += "}"
	if this.StatsUpdate != nil {
		s = append(s, "StatsUpdate: "+mapStringForStatsUpdate+",\n")
	}
	if this.NewPollOps != nil {
		s = append(s, "NewPollOps: "+fmt.Sprintf("%#v", this.NewPollOps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&resources.Resource{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "ConcreteType: "+fmt.Sprintf("%#v", this.ConcreteType)+",\n")
	if this.Kind != nil {
		s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource_Kind) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resources.Resource_Kind{")
	if this.Kind != nil {
		s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource_Kind_Known_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resources.Resource_Kind_Known_{` +
		`Known:` + fmt.Sprintf("%#v", this.Known) + `}`}, ", ")
	return s
}
func (this *Resource_Kind_Other) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resources.Resource_Kind_Other{` +
		`Other:` + fmt.Sprintf("%#v", this.Other) + `}`}, ", ")
	return s
}
func (this *Stats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&resources.Stats{")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.DroppedAt != nil {
		s = append(s, "DroppedAt: "+fmt.Sprintf("%#v", this.DroppedAt)+",\n")
	}
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Stats_Attribute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resources.Stats_Attribute{")
	if this.Field != nil {
		s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	}
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&resources.PollOp{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ResourceId != nil {
		s = append(s, "ResourceId: "+fmt.Sprintf("%#v", this.ResourceId)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.TaskId != nil {
		s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	}
	if this.AsyncOpId != nil {
		s = append(s, "AsyncOpId: "+fmt.Sprintf("%#v", this.AsyncOpId)+",\n")
	}
	s = append(s, "IsReady: "+fmt.Sprintf("%#v", this.IsReady)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringResources(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ResourceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewPollOps) > 0 {
		for iNdEx := len(m.NewPollOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewPollOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StatsUpdate) > 0 {
		for k := range m.StatsUpdate {
			v := m.StatsUpdate[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintResources(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintResources(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintResources(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NewResources) > 0 {
		for iNdEx := len(m.NewResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Kind != nil {
		{
			size, err := m.Kind.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConcreteType) > 0 {
		i -= len(m.ConcreteType)
		copy(dAtA[i:], m.ConcreteType)
		i = encodeVarintResources(dAtA, i, uint64(len(m.ConcreteType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource_Kind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource_Kind) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource_Kind) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		{
			size := m.Kind.Size()
			i -= size
			if _, err := m.Kind.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Resource_Kind_Known_) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Resource_Kind_Known_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintResources(dAtA, i, uint64(m.Known))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *Resource_Kind_Other) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Resource_Kind_Other) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Other)
	copy(dAtA[i:], m.Other)
	i = encodeVarintResources(dAtA, i, uint64(len(m.Other)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DroppedAt != nil {
		{
			size, err := m.DroppedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Stats_Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats_Attribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats_Attribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unit) > 0 {
		i -= len(m.Unit)
		copy(dAtA[i:], m.Unit)
		i = encodeVarintResources(dAtA, i, uint64(len(m.Unit)))
		i--
		dAtA[i] = 0x12
	}
	if m.Field != nil {
		{
			size, err := m.Field.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReady {
		i--
		if m.IsReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AsyncOpId != nil {
		{
			size, err := m.AsyncOpId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TaskId != nil {
		{
			size, err := m.TaskId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintResources(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResources(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintResources(dAtA []byte, offset int, v uint64) int {
	offset -= sovResources(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewResources) > 0 {
		for _, e := range m.NewResources {
			l = e.Size()
			n += 1 + l + sovResources(uint64(l))
		}
	}
	if len(m.StatsUpdate) > 0 {
		for k, v := range m.StatsUpdate {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovResources(uint64(l))
			}
			mapEntrySize := 1 + sovResources(uint64(k)) + l
			n += mapEntrySize + 1 + sovResources(uint64(mapEntrySize))
		}
	}
	if len(m.NewPollOps) > 0 {
		for _, e := range m.NewPollOps {
			l = e.Size()
			n += 1 + l + sovResources(uint64(l))
		}
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	l = len(m.ConcreteType)
	if l > 0 {
		n += 1 + l + sovResources(uint64(l))
	}
	if m.Kind != nil {
		l = m.Kind.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	return n
}

func (m *Resource_Kind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	return n
}

func (m *Resource_Kind_Known_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovResources(uint64(m.Known))
	return n
}
func (m *Resource_Kind_Other) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Other)
	n += 1 + l + sovResources(uint64(l))
	return n
}
func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if m.DroppedAt != nil {
		l = m.DroppedAt.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovResources(uint64(l))
		}
	}
	return n
}

func (m *Stats_Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != nil {
		l = m.Field.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovResources(uint64(l))
	}
	return n
}

func (m *PollOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResources(uint64(l))
	}
	if m.TaskId != nil {
		l = m.TaskId.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if m.AsyncOpId != nil {
		l = m.AsyncOpId.Size()
		n += 1 + l + sovResources(uint64(l))
	}
	if m.IsReady {
		n += 2
	}
	return n
}

func sovResources(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResources(x uint64) (n int) {
	return sovResources(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ResourceUpdate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNewResources := "[]*Resource{"
	for _, f := range this.NewResources {
		repeatedStringForNewResources += strings.Replace(f.String(), "Resource", "Resource", 1) + ","
	}
	repeatedStringForNewResources += "}"
	repeatedStringForNewPollOps := "[]*PollOp{"
	for _, f := range this.NewPollOps {
		repeatedStringForNewPollOps += strings.Replace(f.String(), "PollOp", "PollOp", 1) + ","
	}
	repeatedStringForNewPollOps += "}"
	keysForStatsUpdate := make([]uint64, 0, len(this.StatsUpdate))
	for k, _ := range this.StatsUpdate {
		keysForStatsUpdate = append(keysForStatsUpdate, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForStatsUpdate)
	mapStringForStatsUpdate := "map[uint64]*Stats{"
	for _, k := range keysForStatsUpdate {
		mapStringForStatsUpdate += fmt.Sprintf("%v: %v,", k, this.StatsUpdate[k])
	}
	mapStringForStatsUpdate += "}"
	s := strings.Join([]string{`&ResourceUpdate{`,
		`NewResources:` + repeatedStringForNewResources + `,`,
		`StatsUpdate:` + mapStringForStatsUpdate + `,`,
		`NewPollOps:` + repeatedStringForNewPollOps + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "Id", "common.Id", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MetaId", "common.MetaId", 1) + `,`,
		`ConcreteType:` + fmt.Sprintf("%v", this.ConcreteType) + `,`,
		`Kind:` + strings.Replace(fmt.Sprintf("%v", this.Kind), "Resource_Kind", "Resource_Kind", 1) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "common.Location", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource_Kind) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource_Kind{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource_Kind_Known_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource_Kind_Known_{`,
		`Known:` + fmt.Sprintf("%v", this.Known) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource_Kind_Other) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource_Kind_Other{`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Stats) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttributes := "[]*Stats_Attribute{"
	for _, f := range this.Attributes {
		repeatedStringForAttributes += strings.Replace(fmt.Sprintf("%v", f), "Stats_Attribute", "Stats_Attribute", 1) + ","
	}
	repeatedStringForAttributes += "}"
	s := strings.Join([]string{`&Stats{`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`DroppedAt:` + strings.Replace(fmt.Sprintf("%v", this.DroppedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Attributes:` + repeatedStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *Stats_Attribute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Stats_Attribute{`,
		`Field:` + strings.Replace(fmt.Sprintf("%v", this.Field), "Field", "common.Field", 1) + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollOp{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MetaId", "common.MetaId", 1) + `,`,
		`ResourceId:` + strings.Replace(fmt.Sprintf("%v", this.ResourceId), "Id", "common.Id", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TaskId:` + strings.Replace(fmt.Sprintf("%v", this.TaskId), "Id", "common.Id", 1) + `,`,
		`AsyncOpId:` + strings.Replace(fmt.Sprintf("%v", this.AsyncOpId), "Id", "common.Id", 1) + `,`,
		`IsReady:` + fmt.Sprintf("%v", this.IsReady) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringResources(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ResourceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewResources = append(m.NewResources, &Resource{})
			if err := m.NewResources[len(m.NewResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsUpdate == nil {
				m.StatsUpdate = make(map[uint64]*Stats)
			}
			var mapkey uint64
			var mapvalue *Stats
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowResources
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResources
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResources
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthResources
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthResources
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Stats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipResources(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthResources
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StatsUpdate[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPollOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPollOps = append(m.NewPollOps, &PollOp{})
			if err := m.NewPollOps[len(m.NewPollOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &common.Id{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &common.MetaId{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcreteType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConcreteType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kind == nil {
				m.Kind = &Resource_Kind{}
			}
			if err := m.Kind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &common.Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource_Kind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Known", wireType)
			}
			var v Resource_Kind_Known
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Resource_Kind_Known(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &Resource_Kind_Known_{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = &Resource_Kind_Other{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamp.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DroppedAt == nil {
				m.DroppedAt = &timestamp.Timestamp{}
			}
			if err := m.DroppedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Stats_Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats_Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Field == nil {
				m.Field = &common.Field{}
			}
			if err := m.Field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &common.MetaId{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &common.Id{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskId == nil {
				m.TaskId = &common.Id{}
			}
			if err := m.TaskId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncOpId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AsyncOpId == nil {
				m.AsyncOpId = &common.Id{}
			}
			if err := m.AsyncOpId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReady = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResources(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResources
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResources
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthResources
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowResources
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipResources(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthResources
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthResources = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResources   = fmt.Errorf("proto: integer overflow")
)
